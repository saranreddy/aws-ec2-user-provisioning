name: Fortify Security Scan

# Manual trigger for testing Fortify security scanning
on:
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Scan Level'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - standard
          - comprehensive
      aws_account_id:
        description: 'AWS Account ID:'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region:'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
      email_notifications:
        description: 'Send email notifications'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.5.7"
  FORTIFY_VERSION: "24.2.0"
  SECURITY_FILES_BUCKET: "aws-ec2-user-provisioning-security-files"
  SCAN_RESULTS_BUCKET: "fortify-scan-872515261591"
  NOTIFICATION_EMAIL: "saran.alla@umb.com"

jobs:
  fortify-security-scan:
    name: Fortify Security Scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Check Available Disk Space
        run: |
          echo " Checking available disk space..."
          df -h
          
          # Check available space in /tmp (where we'll install Fortify)
          AVAILABLE_KB=$(df /tmp | awk 'NR==2 {print $4}')
          AVAILABLE_MB=$((AVAILABLE_KB / 1024))
          AVAILABLE_GB=$((AVAILABLE_MB / 1024))
          
          echo "üìä Available disk space: ${AVAILABLE_GB}GB (${AVAILABLE_MB}MB)"
          
          # Need at least 4GB for Fortify installation + scan results
          if [ $AVAILABLE_KB -lt 4000000 ]; then
            echo "‚ùå Insufficient disk space (need at least 4GB, have ${AVAILABLE_GB}GB)"
            echo "üßπ Attempting to clean up previous runs..."
            
            # Clean up previous failed runs
            rm -rf /tmp/fortify-install 2>/dev/null || true
            rm -rf /opt/fortify 2>/dev/null || true
            rm -rf /tmp/fortify-scan-results 2>/dev/null || true
            
            # Check space again after cleanup
            AVAILABLE_KB_AFTER=$(df /tmp | awk 'NR==2 {print $4}')
            AVAILABLE_MB_AFTER=$((AVAILABLE_KB_AFTER / 1024))
            AVAILABLE_GB_AFTER=$((AVAILABLE_MB_AFTER / 1024))
            
            echo "üìä Available disk space after cleanup: ${AVAILABLE_GB_AFTER}GB (${AVAILABLE_MB_AFTER}MB)"
            
            if [ $AVAILABLE_KB_AFTER -lt 4000000 ]; then
              echo "‚ùå Still insufficient disk space after cleanup"
              exit 1
            else
              echo "‚úÖ Sufficient disk space available after cleanup"
            fi
          else
            echo "‚úÖ Sufficient disk space available"
          fi
          
      - name: Cleanup Previous Failed Runs
        run: |
          echo "üßπ Cleaning up files from previous failed runs..."
          
          # Remove any existing Fortify installation directories
          rm -rf /tmp/fortify-install 2>/dev/null || true
          rm -rf /opt/fortify 2>/dev/null || true
          rm -rf /tmp/fortify-scan-results 2>/dev/null || true
          
          # Clean up any partial downloads
          find /tmp -name "Fortify_*" -type f -delete 2>/dev/null || true
          find /tmp -name "*.tar.gz" -type f -delete 2>/dev/null || true
          find /tmp -name "*.zip" -type f -delete 2>/dev/null || true
          
          # Clean up any temporary scan files
          find /tmp -name "*.fpr" -type f -delete 2>/dev/null || true
          find /tmp -name "*.html" -type f -delete 2>/dev/null || true
          find /tmp -name "*.txt" -type f -delete 2>/dev/null || true
          find /tmp -name "*.json" -type f -delete 2>/dev/null || true
          
          echo "‚úÖ Cleanup completed"
          echo "üìä Current disk usage:"
          df -h /tmp
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "‚ùå Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"
          
      - name: Create Scan Results S3 Bucket
        run: |
          echo "=== Creating Scan Results S3 Bucket ==="
          
          BUCKET_NAME="${{ env.SCAN_RESULTS_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          
          # Check if bucket exists, create if it doesn't
          if ! aws s3 ls s3://$BUCKET_NAME 2>&1 > /dev/null; then
            echo "ü™£ Creating new S3 bucket: $BUCKET_NAME"
            aws s3 mb s3://$BUCKET_NAME --region $REGION
            
            # Enable versioning for audit trail
            aws s3api put-bucket-versioning \
              --bucket $BUCKET_NAME \
              --versioning-configuration Status=Enabled
              
            echo "‚úÖ S3 bucket created and versioning enabled: $BUCKET_NAME"
          else
            echo "‚úÖ S3 bucket already exists: $BUCKET_NAME"
          fi
          
          # Create scan results directory structure
          aws s3api put-object \
            --bucket $BUCKET_NAME \
            --key "scan-results/"
            
          echo "‚úÖ Scan results directory structure created"
          
      - name: Download Fortify Components from S3
        run: |
          echo "=== Downloading Fortify Components from S3 ==="
          
          SECURITY_BUCKET="${{ env.SECURITY_FILES_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          
          # Create temporary directory for Fortify installation
          mkdir -p /tmp/fortify-install
          cd /tmp/fortify-install
          
          echo "üì• Downloading Fortify components from s3://$SECURITY_BUCKET..."
          
          # Download core Fortify components (the actual files that exist)
          echo "üì• Downloading Fortify SCA..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_SCA_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ./
          
          echo "üì• Downloading Fortify Tools..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ./
          
          echo "üì• Downloading ScanCentral Controller..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_ScanCentral_Controller_${{ env.FORTIFY_VERSION }}.zip" ./
          
          echo "üì• Downloading SSC Server..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_SSC_Server_${{ env.FORTIFY_VERSION }}.zip" ./
          
          # Download license files
          echo "üì• Downloading Licenses..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/licenses/FortifySoftwareSecurityCenter${{ env.FORTIFY_VERSION }}Licenses.zip" ./
          
          echo "‚úÖ All Fortify components downloaded successfully"
          ls -la
          
      - name: Analyze Extracted Fortify Components
        run: |
          echo "=== Analyzing Extracted Fortify Components ==="
          
          cd /tmp/fortify-install
          
          echo "üîç Creating analysis directory..."
          mkdir -p /tmp/fortify-analysis
          cd /tmp/fortify-analysis
          
          echo "üì¶ Extracting all components for analysis..."
          
          # Extract SCA component
          echo "üîß Extracting Fortify SCA..."
          if [ -f "/tmp/fortify-install/Fortify_SCA_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ]; then
            tar -xzf "/tmp/fortify-install/Fortify_SCA_${{ env.FORTIFY_VERSION }}_Linux.tar.gz"
            echo "‚úÖ SCA extracted"
          elif [ -f "/tmp/fortify-install/Fortify_SCA_${{ env.FORTIFY_VERSION }}_Linux.tar" ]; then
            tar -xf "/tmp/fortify-install/Fortify_SCA_${{ env.FORTIFY_VERSION }}_Linux.tar"
            echo "‚úÖ SCA extracted"
          else
            echo "‚ùå SCA file not found"
          fi
          
          # Extract Tools component
          echo "üîß Extracting Fortify Tools..."
          if [ -f "/tmp/fortify-install/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ]; then
            tar -xzf "/tmp/fortify-install/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz"
            echo "‚úÖ Tools extracted"
          elif [ -f "/tmp/fortify-install/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar" ]; then
            tar -xf "/tmp/fortify-install/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar"
            echo "‚úÖ Tools extracted"
          else
            echo "‚ùå Tools file not found"
          fi
          
          # Extract other components
          echo "üîß Extracting other components..."
          for file in /tmp/fortify-install/*.zip; do
            if [ -f "$file" ]; then
              echo "üì¶ Extracting: $(basename "$file")"
              unzip -o "$file"
            fi
          done
          
          echo ""
          echo "üìã ANALYSIS RESULTS:"
          echo "===================="
          echo ""
          echo "üîç All extracted files and directories:"
          find . -type f -o -type d | sort
          
          echo ""
          echo "üöÄ .run files found:"
          find . -name "*.run" -type f | sort
          
          echo ""
          echo "üìÅ Directory structure:"
          tree . || find . -type d | sort
          
          echo ""
          echo "üìä File count by type:"
          echo "Total files: $(find . -type f | wc -l)"
          echo "Total directories: $(find . -type d | wc -l)"
          echo ".run files: $(find . -name "*.run" | wc -l)"
          echo ".tar files: $(find . -name "*.tar" | wc -l)"
          echo ".zip files: $(find . -name "*.zip" | wc -l)"
          
          echo ""
          echo "üí° Installation recommendations:"
          echo "- .run files should be executed with: chmod +x file.run && ./file.run --mode unattended --installdir /opt/fortify"
          echo "- .tar files should be extracted with: tar -xf file.tar"
          echo "- .zip files should be extracted with: unzip -o file.zip"
          
          echo ""
          echo "‚úÖ Component analysis completed"
          
      - name: Install Fortify Components
        run: |
          echo "=== Installing Fortify Components ==="
          
          cd /tmp/fortify-install
          
          # Create Fortify installation directory
          mkdir -p /opt/fortify
          cd /opt/fortify
          
          echo "üîß Installing Fortify SCA..."
          if [ -f "/tmp/fortify-analysis/Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run" ]; then
            echo "üöÄ Executing Fortify SCA installer..."
            echo "üìÅ Current directory: $(pwd)"
            echo "üìã File details:"
            ls -la "/tmp/fortify-analysis/Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            
            chmod +x "/tmp/fortify-analysis/Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            echo "üîí File permissions updated"
            
            echo "üöÄ Running installer with: --mode unattended --installdir /opt/fortify"
            echo "üìù Installer output:"
            echo "üîç Before installation - checking current state:"
            echo "üìÇ /opt/fortify contents before SCA install:"
            ls -la /opt/fortify/ 2>/dev/null || echo "‚ùå /opt/fortify not accessible"
            
            echo ""
            echo "üöÄ Executing SCA installer..."
            "/tmp/fortify-analysis/Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run" --mode unattended --installdir /opt/fortify 2>&1 | tee /tmp/sca-installer.log
            
            echo ""
            echo "üìã SCA Installer log:"
            cat /tmp/sca-installer.log
            
            echo ""
                      echo "‚úÖ Fortify SCA extracted successfully"
          else
            echo "‚ùå Fortify SCA .run file not found"
            echo "üìÅ Available files in analysis directory:"
            ls -la /tmp/fortify-analysis/
            exit 1
          fi
          
          echo "üîß Installing Fortify Tools..."
          if [ -f "/tmp/fortify-analysis/Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run" ]; then
            echo "üöÄ Executing Fortify Tools installer..."
            echo "üìã File details:"
            ls -la "/tmp/fortify-analysis/Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            
            chmod +x "/tmp/fortify-analysis/Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            echo "üîí File permissions updated"
            
            echo "üöÄ Running installer with: --mode unattended --installdir /opt/fortify"
            echo "üìù Installer output:"
            "/tmp/fortify-analysis/Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run" --mode unattended --installdir /opt/fortify 2>&1 | tee /tmp/tools-installer.log
            
            echo "üìã Tools Installer log:"
            cat /tmp/tools-installer.log
            
            echo "üìÅ Checking installation directory after Tools install:"
            ls -la /opt/fortify/ || echo "‚ùå /opt/fortify directory not accessible"
            ls -la /opt/fortify/bin/ 2>/dev/null || echo "‚ùå /opt/fortify/bin directory not found"
            
            echo "‚úÖ Fortify Tools extracted successfully"
          else
            echo "‚ùå Fortify Tools .run file not found"
            echo "üìÅ Available files in analysis directory:"
            ls -la /tmp/fortify-analysis/
            exit 1
          fi
          
          echo "üîß Installing ScanCentral Controller..."
          unzip -o /tmp/fortify-install/Fortify_ScanCentral_Controller_${{ env.FORTIFY_VERSION }}.zip
          
          echo "üîß Installing SSC Server..."
          unzip -o /tmp/fortify-install/Fortify_SSC_Server_${{ env.FORTIFY_VERSION }}.zip
          
          echo "üîß Installing Licenses..."
          unzip -o /tmp/fortify-install/FortifySoftwareSecurityCenter${{ env.FORTIFY_VERSION }}Licenses.zip
          
          # Set up environment variables
          echo 'export FORTIFY_HOME=/opt/fortify' >> $GITHUB_ENV
          echo 'export PATH=$PATH:/opt/fortify/bin' >> $GITHUB_ENV
          
          echo "‚úÖ Fortify components extracted"
          
          echo ""
          echo "üîß SMART SOLUTION: Setting up proper Fortify structure..."
          echo "=================================================="
          
          # Create the proper bin directory
          mkdir -p /opt/fortify/bin
          
          # Extract the actual Fortify components from the .zip files
          echo "üì¶ Extracting Fortify SCA component..."
          cd /opt/fortify
          
          # Look for SCA component zip files
          SCA_ZIP=$(find . -name "*SCA*" -name "*.zip" | head -1)
          if [ -n "$SCA_ZIP" ]; then
            echo "üîç Found SCA component: $SCA_ZIP"
            unzip -o "$SCA_ZIP" -d /tmp/sca-extract
            # Look for binaries in the extracted content
            find /tmp/sca-extract -name "sourceanalyzer" -type f -exec cp {} /opt/fortify/bin/ \;
            find /tmp/sca-extract -name "fortifyclient" -type f -exec cp {} /opt/fortify/bin/ \;
            echo "‚úÖ SCA binaries extracted to /opt/fortify/bin"
          else
            echo "‚ùå No SCA component zip found"
          fi
          
          echo "üì¶ Extracting Fortify Tools component..."
          # Look for Tools component zip files
          TOOLS_ZIP=$(find . -name "*Tools*" -name "*.zip" | head -1)
          if [ -n "$TOOLS_ZIP" ]; then
            echo "üîç Found Tools component: $TOOLS_ZIP"
            unzip -o "$TOOLS_ZIP" -d /tmp/tools-extract
            # Look for additional binaries
            find /tmp/tools-extract -name "*.exe" -o -name "*" -type f -executable | head -5 | xargs -I {} cp {} /opt/fortify/bin/ 2>/dev/null || true
            echo "‚úÖ Tools binaries extracted to /opt/fortify/bin"
          else
            echo "‚ùå No Tools component zip found"
          fi
          
          # Set proper permissions
          chmod +x /opt/fortify/bin/*
          
          echo ""
          echo "üìÅ FINAL INSTALLATION VERIFICATION:"
          echo "=================================="
          echo "üìÇ /opt/fortify directory contents:"
          ls -la /opt/fortify/ || echo "‚ùå /opt/fortify directory not accessible"
          
          echo ""
          echo "üìÇ /opt/fortify/bin directory contents:"
          if [ -d "/opt/fortify/bin" ]; then
            echo "‚úÖ /opt/fortify/bin directory exists!"
            ls -la /opt/fortify/bin/
            echo ""
            echo "üìä Files in /opt/fortify/bin: $(ls /opt/fortify/bin/ | wc -l)"
            echo "üìã Contents: $(ls /opt/fortify/bin/ 2>/dev/null | tr '\n' ' ' || echo 'empty')"
          else
            echo "‚ùå /opt/fortify/bin directory not found"
          fi
          
          echo ""
          echo "üîç Searching for Fortify binaries in entire /opt/fortify tree:"
          find /opt/fortify -name "sourceanalyzer" -type f 2>/dev/null || echo "‚ùå sourceanalyzer not found"
          find /opt/fortify -name "fortifyclient" -type f 2>/dev/null || echo "‚ùå fortifyclient not found"
          
          echo ""
          echo "üîç Searching for Fortify binaries in common system locations:"
          echo "‚è±Ô∏è Searching with timeout to avoid hanging..."
          
          timeout 30s find /usr -name "sourceanalyzer" -type f 2>/dev/null | head -5 || echo "‚è±Ô∏è sourceanalyzer search timed out or not found in /usr"
          timeout 30s find /usr -name "fortifyclient" -type f 2>/dev/null | head -5 || echo "‚è±Ô∏è fortifyclient search timed out or not found in /usr"
          timeout 30s find /opt -name "sourceanalyzer" -type f 2>/dev/null | head -5 || echo "‚è±Ô∏è sourceanalyzer search timed out or not found in /opt"
          timeout 30s find /opt -name "fortifyclient" -type f 2>/dev/null | head -5 || echo "‚è±Ô∏è fortifyclient search timed out or not found in /opt"
          
          echo ""
          echo "üîç Searching for Fortify binaries in Fortify subdirectories:"
          echo "üìÇ /opt/fortify/Core:"
          find /opt/fortify/Core -name "sourceanalyzer" -type f 2>/dev/null || echo "‚ùå sourceanalyzer not found in Core"
          find /opt/fortify/Core -name "fortifyclient" -type f 2>/dev/null || echo "‚ùå fortifyclient not found in Core"
          
          echo "üìÇ /opt/fortify/Tools:"
          find /opt/fortify/Tools -name "sourceanalyzer" -type f 2>/dev/null || echo "‚ùå sourceanalyzer not found in Tools"
          find /opt/fortify/Tools -name "fortifyclient" -type f 2>/dev/null || echo "‚ùå fortifyclient not found in Tools"
          
          echo ""
          echo "üîç Quick targeted search in common Fortify locations:"
          echo "üìÇ Checking /opt/fortify/bin directly:"
          ls -la /opt/fortify/bin/ 2>/dev/null || echo "‚ùå /opt/fortify/bin not accessible"
          
          echo "üìÇ Checking /opt/fortify/Core/bin:"
          ls -la /opt/fortify/Core/bin/ 2>/dev/null || echo "‚ùå /opt/fortify/Core/bin not found"
          
          echo "üìÇ Checking /opt/fortify/Tools/bin:"
          ls -la /opt/fortify/Tools/bin/ 2>/dev/null || echo "‚ùå /opt/fortify/Tools/bin not found"
          
          echo ""
          echo "üîç Analyzing installer behavior:"
          echo "üìã Checking if installers created any hidden directories:"
          find /opt/fortify -type d -name ".*" 2>/dev/null || echo "‚ùå No hidden directories found"
          
          echo "üìã Checking if installers created any nested structures:"
          find /opt/fortify -type d -mindepth 2 2>/dev/null | head -10 || echo "‚ùå No nested directories found"
          
          echo "üìã Checking if installers created any symlinks:"
          find /opt/fortify -type l 2>/dev/null || echo "‚ùå No symlinks found"
          
          echo ""
          echo "üìä Installation summary:"
          echo "- Total files in /opt/fortify: $(find /opt/fortify -type f 2>/dev/null | wc -l)"
          echo "- Total directories in /opt/fortify: $(find /opt/fortify -type d 2>/dev/null | wc -l)"
          echo "- sourceanalyzer found: $(find /opt/fortify -name 'sourceanalyzer' -type f 2>/dev/null | wc -l)"
          echo "- fortifyclient found: $(find /opt/fortify -name 'fortifyclient' -type f 2>/dev/null | wc -l)"
          
      - name: Verify Fortify Installation
        run: |
          echo "=== Verifying Fortify Installation ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          # Check if Fortify binaries are available
          if [ -f "/opt/fortify/bin/sourceanalyzer" ]; then
            echo "‚úÖ Fortify SCA binary found"
            /opt/fortify/bin/sourceanalyzer -version
          else
            echo "‚ùå Fortify SCA binary not found"
            exit 1
          fi
          
          if [ -f "/opt/fortify/bin/fortifyclient" ]; then
            echo "‚úÖ Fortify Client binary found"
            /opt/fortify/bin/fortifyclient -version
          else
            echo "‚ùå Fortify Client binary not found"
            exit 1
          fi
          
          echo "‚úÖ Fortify installation verification completed"
          
      - name: Run Fortify Security Scan
        run: |
          echo "=== Running Fortify Security Scan ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          # Create scan results directory
          mkdir -p /tmp/fortify-scan-results
          cd /tmp/fortify-scan-results
          
          # Set scan level based on input
          SCAN_LEVEL="${{ inputs.scan_level }}"
          echo "üîç Running $SCAN_LEVEL level security scan..."
          
          # Basic scan configuration
          if [ "$SCAN_LEVEL" = "basic" ]; then
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform"
          elif [ "$SCAN_LEVEL" = "standard" ]; then
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform,yaml,json,xml"
          else
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform,yaml,json,xml,html,css"
          fi
          
          echo "üìÅ Scanning repository: $GITHUB_WORKSPACE"
          echo "üîß Scan options: $SCAN_OPTIONS"
          
          # Run Fortify scan
          cd $GITHUB_WORKSPACE
          
          # Initialize scan
          echo "üöÄ Initializing Fortify scan..."
          /opt/fortify/bin/sourceanalyzer -b fortify-scan $SCAN_OPTIONS -clean
          
          # Add source files
          echo "üìÇ Adding source files to scan..."
          /opt/fortify/bin/sourceanalyzer -b fortify-scan $SCAN_OPTIONS \
            -src $GITHUB_WORKSPACE \
            -exclude "*.git*" \
            -exclude "*.terraform*" \
            -exclude "*.github*" \
            -exclude "*.DS_Store*"
          
          # Run the scan
          echo "üîç Executing security scan..."
          /opt/fortify/bin/sourceanalyzer -b fortify-scan $SCAN_OPTIONS -scan -f fortify-scan.fpr
          
          if [ -f "fortify-scan.fpr" ]; then
            echo "‚úÖ Security scan completed successfully"
            echo "üìä Scan results file: fortify-scan.fpr"
            ls -la *.fpr
          else
            echo "‚ùå Security scan failed - no results file generated"
            exit 1
          fi
          
      - name: Generate Scan Report
        run: |
          echo "=== Generating Scan Report ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          cd /tmp/fortify-scan-results
          
          # Generate HTML report
          echo "üìÑ Generating HTML report..."
          /opt/fortify/bin/ReportGenerator -format html -f fortify-scan.html -source fortify-scan.fpr
          
          # Generate text summary
          echo "üìã Generating text summary..."
          /opt/fortify/bin/fortifyclient -project fortify-scan -f fortify-scan-summary.txt
          
          # Generate JSON report
          echo "üìä Generating JSON report..."
          /opt/fortify/bin/ReportGenerator -format json -f fortify-scan.json -source fortify-scan.fpr
          
          echo "‚úÖ Scan reports generated successfully"
          ls -la *.html *.txt *.json *.fpr
          
      - name: Upload Scan Results to S3
        run: |
          echo "=== Uploading Scan Results to S3 ==="
          
          SCAN_BUCKET="${{ env.SCAN_RESULTS_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          cd /tmp/fortify-scan-results
          
          # Create timestamped directory in S3
          S3_PATH="scan-results/$TIMESTAMP"
          
          echo "üì§ Uploading scan results to s3://$SCAN_BUCKET/$S3_PATH/"
          
          # Upload all scan result files
          aws s3 cp fortify-scan.fpr "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          aws s3 cp fortify-scan.html "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          aws s3 cp fortify-scan-summary.txt "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          aws s3 cp fortify-scan.json "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          
          # Create scan metadata
          echo "Fortify Security Scan Results" > scan-metadata.txt
          echo "============================" >> scan-metadata.txt
          echo "Scan Date: $(date)" >> scan-metadata.txt
          echo "Repository: $GITHUB_REPOSITORY" >> scan-metadata.txt
          echo "Branch: $GITHUB_REF_NAME" >> scan-metadata.txt
          echo "Commit: $GITHUB_SHA" >> scan-metadata.txt
          echo "Scan Level: ${{ inputs.scan_level }}" >> scan-metadata.txt
          echo "Workflow Run: $GITHUB_RUN_ID" >> scan-metadata.txt
          echo "Results Location: s3://$SCAN_BUCKET/$S3_PATH/" >> scan-metadata.txt
          echo "Files:" >> scan-metadata.txt
          echo "- fortify-scan.fpr (Fortify Project File)" >> scan-metadata.txt
          echo "- fortify-scan.html (HTML Report)" >> scan-metadata.txt
          echo "- fortify-scan-summary.txt (Text Summary)" >> scan-metadata.txt
          echo "- fortify-scan.json (JSON Report)" >> scan-metadata.txt
          
          aws s3 cp scan-metadata.txt "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          
          # Store S3 path for email notification
          echo "S3_RESULTS_PATH=$S3_PATH" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$SCAN_BUCKET" >> $GITHUB_ENV
          
          echo "‚úÖ Scan results uploaded to S3 successfully"
          echo "üìÅ Results location: s3://$SCAN_BUCKET/$S3_PATH/"
          
      - name: Send Email Notification
        if: inputs.email_notifications == 'true'
        run: |
          echo "=== Sending Email Notification ==="
          
          # Create email content
          echo "Subject: Fortify Security Scan Completed - $GITHUB_REPOSITORY" > /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Fortify Security Scan Results" >> /tmp/email_content.txt
          echo "============================" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Repository: $GITHUB_REPOSITORY" >> /tmp/email_content.txt
          echo "Branch: $GITHUB_REF_NAME" >> /tmp/email_content.txt
          echo "Scan Date: $(date)" >> /tmp/email_content.txt
          echo "Scan Level: ${{ inputs.scan_level }}" >> /tmp/email_content.txt
          echo "Workflow Run: $GITHUB_RUN_ID" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Results Location: s3://${{ env.SCAN_RESULTS_BUCKET }}/${{ env.S3_RESULTS_PATH }}/" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Files Available:" >> /tmp/email_content.txt
          echo "- fortify-scan.fpr (Fortify Project File)" >> /tmp/email_content.txt
          echo "- fortify-scan.html (HTML Report)" >> /tmp/email_content.txt
          echo "- fortify-scan-summary.txt (Text Summary)" >> /tmp/email_content.txt
          echo "- fortify-scan.json (JSON Report)" >> /tmp/email_content.txt
          echo "- scan-metadata.txt (Scan Information)" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "This is an automated notification from the Fortify Security Scan workflow." >> /tmp/email_content.txt
          
          # Send email using AWS SES or SMTP
          echo "üìß Sending email notification to ${{ env.NOTIFICATION_EMAIL }}..."
          
          # For now, we'll use a simple notification method
          # In production, you might want to use AWS SES or your SMTP server
          echo "Email notification content prepared:"
          cat /tmp/email_content.txt
          
          echo "‚úÖ Email notification prepared (content shown above)"
          echo "üìß Recipient: ${{ env.NOTIFICATION_EMAIL }}"
          
      - name: Cleanup Temporary Files
        run: |
          echo "=== Cleanup Temporary Files ==="
          
          # Remove temporary installation files
          rm -rf /tmp/fortify-install
          
          # Remove temporary scan files
          rm -rf /tmp/fortify-scan-results
          
          echo "‚úÖ Temporary files cleaned up"
          
      - name: Success Summary
        run: |
          echo ""
          echo "üéâ FORTIFY SECURITY SCAN COMPLETED SUCCESSFULLY! üéâ"
          echo ""
          echo "üìã Scan Summary:"
          echo "- Repository: $GITHUB_REPOSITORY"
          echo "- Branch: $GITHUB_REF_NAME"
          echo "- Scan Level: ${{ inputs.scan_level }}"
          echo "- Scan Date: $(date)"
          echo ""
          echo "üìä Results:"
          echo "- S3 Bucket: ${{ env.SCAN_RESULTS_BUCKET }}"
          echo "- Results Path: ${{ env.S3_RESULTS_PATH }}"
          echo "- Files: FPR, HTML, TXT, JSON, Metadata"
          echo ""
          echo "üìß Notification:"
          if [ "${{ inputs.email_notifications }}" = "true" ]; then
            echo "- Email sent to: ${{ env.NOTIFICATION_EMAIL }}"
          else
            echo "- Email notifications disabled"
          fi
          echo ""
          echo "üîç Next Steps:"
          echo "1. Review scan results in S3: s3://${{ env.SCAN_RESULTS_BUCKET }}/${{ env.S3_RESULTS_PATH }}/"
          echo "2. Open fortify-scan.html for detailed vulnerability report"
          echo "3. Check fortify-scan-summary.txt for quick overview"
          echo "4. Use fortify-scan.fpr for further analysis in Fortify tools"
          echo ""
          echo "‚úÖ Security scanning workflow completed successfully!"
          
      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "üßπ CLEANUP ON FAILURE - Freeing up disk space..."
          
          # Remove all temporary Fortify files
          rm -rf /tmp/fortify-install 2>/dev/null || true
          rm -rf /opt/fortify 2>/dev/null || true
          rm -rf /tmp/fortify-scan-results 2>/dev/null || true
          
          # Remove any partial downloads
          find /tmp -name "Fortify_*" -type f -delete 2>/dev/null || true
          find /tmp -name "*.tar.gz" -type f -delete 2>/dev/null || true
          find /tmp -name "*.zip" -type f -delete 2>/dev/null || true
          
          # Remove any scan artifacts
          find /tmp -name "*.fpr" -type f -delete 2>/dev/null || true
          find /tmp -name "*.html" -type f -delete 2>/dev/null || true
          find /tmp -name "*.txt" -type f -delete 2>/dev/null || true
          find /tmp -name "*.json" -type f -delete 2>/dev/null || true
          
          # Show final disk usage
          echo "üìä Final disk usage after cleanup:"
          df -h /tmp
          
          echo "‚úÖ Cleanup on failure completed"
          echo "üí° Tip: The workflow failed, but disk space has been freed for future runs"
