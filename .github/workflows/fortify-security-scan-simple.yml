name: Fortify Security Scan (Simplified)

# Manual trigger for testing Fortify security scanning
on:
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Scan Level'
        required: true
        default: 'basic'
        type: choice
        options:
          - basic
          - standard
          - comprehensive
      aws_account_id:
        description: 'AWS Account ID:'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region:'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
      email_notifications:
        description: 'Send email notifications'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.5.7"
  FORTIFY_VERSION: "24.2.0"
  SECURITY_FILES_BUCKET: "aws-ec2-user-provisioning-security-files"
  SCAN_RESULTS_BUCKET: "fortify-scan-872515261591"
  NOTIFICATION_EMAIL: "saran.alla@umb.com"

jobs:
  fortify-security-scan:
    name: Fortify Security Scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Check Available Disk Space
        run: |
          echo "üìä Checking available disk space..."
          df -h
          
          # Need at least 4GB for Fortify installation + scan results
          AVAILABLE_KB=$(df /tmp | awk 'NR==2 {print $4}')
          AVAILABLE_MB=$((AVAILABLE_KB / 1024))
          AVAILABLE_GB=$((AVAILABLE_MB / 1024))
          
          echo "üìä Available disk space: ${AVAILABLE_GB}GB (${AVAILABLE_MB}MB)"
          
          if [ $AVAILABLE_KB -lt 4000000 ]; then
            echo "‚ùå Insufficient disk space (need at least 4GB, have ${AVAILABLE_GB}GB)"
            exit 1
          else
            echo "‚úÖ Sufficient disk space available"
          fi
          
      - name: Cleanup Previous Runs
        run: |
          echo "üßπ Cleaning up files from previous runs..."
          rm -rf /tmp/fortify-install 2>/dev/null || true
          rm -rf /opt/fortify 2>/dev/null || true
          rm -rf /tmp/fortify-scan-results 2>/dev/null || true
          echo "‚úÖ Cleanup completed"
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "‚ùå Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"
          
      - name: Create Scan Results S3 Bucket
        run: |
          echo "=== Creating Scan Results S3 Bucket ==="
          
          BUCKET_NAME="${{ env.SCAN_RESULTS_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          
          # Check if bucket exists, create if it doesn't
          if ! aws s3 ls s3://$BUCKET_NAME 2>&1 > /dev/null; then
            echo "ü™£ Creating new S3 bucket: $BUCKET_NAME"
            aws s3 mb s3://$BUCKET_NAME --region $REGION
            
            # Enable versioning for audit trail
            aws s3api put-bucket-versioning \
              --bucket $BUCKET_NAME \
              --versioning-configuration Status=Enabled
              
            echo "‚úÖ S3 bucket created and versioning enabled: $BUCKET_NAME"
          else
            echo "‚úÖ S3 bucket already exists: $BUCKET_NAME"
          fi
          
          # Create scan results directory structure
          aws s3api put-object \
            --bucket $BUCKET_NAME \
            --key "scan-results/"
            
          echo "‚úÖ Scan results directory structure created"
          
      - name: Download and Install Fortify Components
        run: |
          echo "=== Downloading and Installing Fortify Components ==="
          
          SECURITY_BUCKET="${{ env.SECURITY_FILES_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          
          # Create Fortify installation directory
          mkdir -p /opt/fortify
          mkdir -p /tmp/fortify-install
          cd /tmp/fortify-install
          
          echo "üì• Downloading Fortify components from s3://$SECURITY_BUCKET..."
          
          # Download core Fortify components - FIXED: Use correct file names from S3
          echo "üì• Downloading Fortify SCA (.run installer)..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run" ./
          
          echo "üì• Downloading Fortify Tools..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ./
          
          echo "üì• Downloading ScanCentral Controller..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_ScanCentral_Controller_${{ env.FORTIFY_VERSION }}.zip" ./
          
          echo "üì• Downloading SSC Server..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/Fortify_SSC_Server_${{ env.FORTIFY_VERSION }}.zip" ./
          
          # Download license files
          echo "üì• Downloading Licenses..."
          aws s3 cp "s3://$SECURITY_BUCKET/fortify/${{ env.FORTIFY_VERSION }}/components/FortifySoftwareSecurityCenter${{ env.FORTIFY_VERSION }}Licenses.zip" ./
          
          echo "‚úÖ All Fortify components downloaded successfully"
          ls -la
          
          # CRITICAL FIX: Execute .run files as installers, not just extract them
          echo "üöÄ Executing Fortify .run installers..."
          
          # Execute SCA installer (.run file)
          if [ -f "Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run" ]; then
            echo "üîß Installing SCA from: Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            chmod +x "Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run"
            "./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run" --mode unattended --installdir /opt/fortify 2>&1 | tee /tmp/sca-install.log
            echo "‚úÖ SCA installation completed"
          else
            echo "‚ùå SCA .run file not found!"
            echo "üìÅ Available files:"
            ls -la
            exit 1
          fi
          
          # Extract Tools component (.tar.gz file)
          echo "üîß Extracting Fortify Tools..."
          if [ -f "Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" ]; then
            tar -xzf "Fortify_Tools_${{ env.FORTIFY_VERSION }}_Linux.tar.gz" -C /opt/fortify
            echo "‚úÖ Tools extracted to /opt/fortify"
          else
            echo "‚ùå Tools .tar.gz file not found!"
            exit 1
          fi
          
          # Extract other components
          echo "üîß Extracting other components..."
          unzip -o "Fortify_ScanCentral_Controller_${{ env.FORTIFY_VERSION }}.zip" -d /opt/fortify
          unzip -o "Fortify_SSC_Server_${{ env.FORTIFY_VERSION }}.zip" -d /opt/fortify
          unzip -o "FortifySoftwareSecurityCenter${{ env.FORTIFY_VERSION }}Licenses.zip" -d /opt/fortify
          
          # Set up environment variables
          echo 'export FORTIFY_HOME=/opt/fortify' >> $GITHUB_ENV
          echo 'export PATH=$PATH:/opt/fortify/bin' >> $GITHUB_ENV
          
          echo "‚úÖ Fortify components downloaded, installed, and extracted to /opt/fortify"
          
      - name: Check Installation Logs
        if: always()
        run: |
          echo "=== Checking Installation Logs ==="
          
          if [ -f "/tmp/sca-install.log" ]; then
            echo "üìã SCA Installation Log:"
            cat /tmp/sca-install.log
          else
            echo "‚ö†Ô∏è SCA installation log not found"
          fi
          
          if [ -f "/tmp/tools-install.log" ]; then
            echo ""
            echo "üìã Tools Installation Log:"
            cat /tmp/tools-install.log
          else
            echo "‚ö†Ô∏è Tools installation log not found"
          fi
          
          echo ""
          echo "üìÇ Final /opt/fortify directory structure:"
          find /opt/fortify -type f -name "*.run" 2>/dev/null | head -10 || echo "No .run files found"
          
      - name: Verify Fortify Installation
        run: |
          echo "=== Verifying Fortify Installation ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          echo "üìÇ Contents of /opt/fortify:"
          ls -la /opt/fortify/
          
          echo ""
          echo "üîç Searching for Fortify binaries..."
          
          # Look for sourceanalyzer in common locations
          echo "üîç Searching for sourceanalyzer..."
          SOURCEANALYZER_PATH=$(find /opt/fortify -name "sourceanalyzer" -type f 2>/dev/null | head -1)
          if [ -n "$SOURCEANALYZER_PATH" ]; then
            echo "‚úÖ Found sourceanalyzer at: $SOURCEANALYZER_PATH"
            chmod +x "$SOURCEANALYZER_PATH"
            "$SOURCEANALYZER_PATH" -version
          else
            echo "‚ùå sourceanalyzer not found in /opt/fortify"
            echo "üîç Searching in common Fortify subdirectories..."
            
            # Check common Fortify installation subdirectories
            for subdir in Core Tools bin sdk; do
              if [ -d "/opt/fortify/$subdir" ]; then
                echo "üìÇ Checking /opt/fortify/$subdir:"
                ls -la "/opt/fortify/$subdir/" 2>/dev/null || echo "  Cannot access $subdir"
                
                # Look for sourceanalyzer in this subdirectory
                SUBDIR_BINARY=$(find "/opt/fortify/$subdir" -name "sourceanalyzer" -type f 2>/dev/null | head -1)
                if [ -n "$SUBDIR_BINARY" ]; then
                  echo "‚úÖ Found sourceanalyzer in $subdir: $SUBDIR_BINARY"
                  SOURCEANALYZER_PATH="$SUBDIR_BINARY"
                  break
                fi
              fi
            done
            
            # If still not found, search more broadly
            if [ -z "$SOURCEANALYZER_PATH" ]; then
              echo "üîç Broad search for sourceanalyzer..."
              BROAD_SEARCH=$(find /opt/fortify -type f -name "*sourceanalyzer*" 2>/dev/null | head -5)
              if [ -n "$BROAD_SEARCH" ]; then
                echo "üìã Found potential sourceanalyzer files:"
                echo "$BROAD_SEARCH"
              else
                echo "‚ùå No sourceanalyzer files found anywhere in /opt/fortify"
                echo "üîç Available files in /opt/fortify:"
                find /opt/fortify -type f -name "*sourceanalyzer*" 2>/dev/null || echo "No sourceanalyzer files found"
                exit 1
              fi
            fi
          fi
          
          # Look for fortifyclient in common locations
          echo ""
          echo "üîç Searching for fortifyclient..."
          FORTIFYCLIENT_PATH=$(find /opt/fortify -name "fortifyclient" -type f 2>/dev/null | head -1)
          if [ -n "$FORTIFYCLIENT_PATH" ]; then
            echo "‚úÖ Found fortifyclient at: $FORTIFYCLIENT_PATH"
            chmod +x "$FORTIFYCLIENT_PATH"
            "$FORTIFYCLIENT_PATH" -version
          else
            echo "‚ùå fortifyclient not found in /opt/fortify"
            echo "üîç Searching in common Fortify subdirectories..."
            
            # Check common Fortify installation subdirectories
            for subdir in Core Tools bin sdk; do
              if [ -d "/opt/fortify/$subdir" ]; then
                # Look for fortifyclient in this subdirectory
                SUBDIR_BINARY=$(find "/opt/fortify/$subdir" -name "fortifyclient" -type f 2>/dev/null | head -1)
                if [ -n "$SUBDIR_BINARY" ]; then
                  echo "‚úÖ Found fortifyclient in $subdir: $SUBDIR_BINARY"
                  FORTIFYCLIENT_PATH="$SUBDIR_BINARY"
                  break
                fi
              fi
            done
            
            # If still not found, search more broadly
            if [ -z "$FORTIFYCLIENT_PATH" ]; then
              echo "üîç Broad search for fortifyclient..."
              BROAD_SEARCH=$(find /opt/fortify -type f -name "*fortifyclient*" 2>/dev/null | head -5)
              if [ -n "$BROAD_SEARCH" ]; then
                echo "üìã Found potential fortifyclient files:"
                echo "$BROAD_SEARCH"
              else
                echo "‚ùå No fortifyclient files found anywhere in /opt/fortify"
                echo "üîç Available files in /opt/fortify:"
                find /opt/fortify -type f -name "*fortifyclient*" 2>/dev/null || echo "No fortifyclient files found"
                exit 1
              fi
            fi
          fi
          
          # Final verification
          if [ -n "$SOURCEANALYZER_PATH" ] && [ -n "$FORTIFYCLIENT_PATH" ]; then
            echo ""
            echo "‚úÖ Fortify installation verification completed successfully!"
            echo "üìã Binary locations:"
            echo "  - sourceanalyzer: $SOURCEANALYZER_PATH"
            echo "  - fortifyclient: $FORTIFYCLIENT_PATH"
          else
            echo ""
            echo "‚ùå Fortify installation verification failed!"
            echo "Required binaries not found. Check the installation logs above."
            exit 1
          fi
          
      - name: Run Fortify Security Scan
        run: |
          echo "=== Running Fortify Security Scan ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          # Find the actual binary paths
          SOURCEANALYZER_PATH=$(find /opt/fortify -name "sourceanalyzer" -type f 2>/dev/null | head -1)
          FORTIFYCLIENT_PATH=$(find /opt/fortify -name "fortifyclient" -type f 2>/dev/null | head -1)
          
          if [ -z "$SOURCEANALYZER_PATH" ] || [ -z "$FORTIFYCLIENT_PATH" ]; then
            echo "‚ùå Required Fortify binaries not found"
            exit 1
          fi
          
          # Create scan results directory
          mkdir -p /tmp/fortify-scan-results
          cd /tmp/fortify-scan-results
          
          # Set scan level based on input
          SCAN_LEVEL="${{ inputs.scan_level }}"
          echo "üîç Running $SCAN_LEVEL level security scan..."
          
          # Basic scan configuration
          if [ "$SCAN_LEVEL" = "basic" ]; then
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform"
          elif [ "$SCAN_LEVEL" = "standard" ]; then
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform,yaml,json,xml"
          else
            SCAN_OPTIONS="-Dcom.fortify.sca.Phase0HigherOrder.Languages=java,js,python,shell,terraform,yaml,json,xml,html,css"
          fi
          
          echo "üìÅ Scanning repository: $GITHUB_WORKSPACE"
          echo "üîß Scan options: $SCAN_OPTIONS"
          echo "üöÄ Using sourceanalyzer: $SOURCEANALYZER_PATH"
          
          # Run Fortify scan
          cd $GITHUB_WORKSPACE
          
          # Initialize scan
          echo "üöÄ Initializing Fortify scan..."
          "$SOURCEANALYZER_PATH" -b fortify-scan $SCAN_OPTIONS -clean
          
          # Add source files
          echo "üìÇ Adding source files to scan..."
          "$SOURCEANALYZER_PATH" -b fortify-scan $SCAN_OPTIONS \
            -src $GITHUB_WORKSPACE \
            -exclude "*.git*" \
            -exclude "*.terraform*" \
            -exclude "*.github*" \
            -exclude "*.DS_Store*"
          
          # Run the scan
          echo "üîç Executing security scan..."
          "$SOURCEANALYZER_PATH" -b fortify-scan $SCAN_OPTIONS -scan -f fortify-scan.fpr
          
          if [ -f "fortify-scan.fpr" ]; then
            echo "‚úÖ Security scan completed successfully"
            echo "üìä Scan results file: fortify-scan.fpr"
            ls -la *.fpr
          else
            echo "‚ùå Security scan failed - no results file generated"
            exit 1
          fi
          
      - name: Generate Scan Report
        run: |
          echo "=== Generating Scan Report ==="
          
          export FORTIFY_HOME=/opt/fortify
          export PATH=$PATH:/opt/fortify/bin
          
          cd /tmp/fortify-scan-results
          
          # Find ReportGenerator binary
          REPORTGENERATOR_PATH=$(find /opt/fortify -name "ReportGenerator" -type f 2>/dev/null | head -1)
          
          if [ -n "$REPORTGENERATOR_PATH" ]; then
            chmod +x "$REPORTGENERATOR_PATH"
            
            # Generate HTML report
            echo "üìÑ Generating HTML report..."
            "$REPORTGENERATOR_PATH" -format html -f fortify-scan.html -source fortify-scan.fpr
            
            # Generate JSON report
            echo "üìä Generating JSON report..."
            "$REPORTGENERATOR_PATH" -format json -f fortify-scan.json -source fortify-scan.fpr
          else
            echo "‚ö†Ô∏è ReportGenerator not found, skipping report generation"
          fi
          
          # Generate text summary using fortifyclient
          FORTIFYCLIENT_PATH=$(find /opt/fortify -name "fortifyclient" -type f 2>/dev/null | head -1)
          if [ -n "$FORTIFYCLIENT_PATH" ]; then
            echo "üìã Generating text summary..."
            "$FORTIFYCLIENT_PATH" -project fortify-scan -f fortify-scan-summary.txt || echo "Text summary generation failed"
          fi
          
          echo "‚úÖ Scan reports generated successfully"
          ls -la *.html *.txt *.json *.fpr 2>/dev/null || echo "Some report files may not have been generated"
          
      - name: Upload Scan Results to S3
        run: |
          echo "=== Uploading Scan Results to S3 ==="
          
          SCAN_BUCKET="${{ env.SCAN_RESULTS_BUCKET }}"
          REGION="${{ inputs.aws_region }}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          cd /tmp/fortify-scan-results
          
          # Create timestamped directory in S3
          S3_PATH="scan-results/$TIMESTAMP"
          
          echo "üì§ Uploading scan results to s3://$SCAN_BUCKET/$S3_PATH/"
          
          # Upload all available scan result files
          for file in *.fpr *.html *.txt *.json; do
            if [ -f "$file" ]; then
              echo "üì§ Uploading $file..."
              aws s3 cp "$file" "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
            fi
          done
          
          # Create scan metadata
          echo "Fortify Security Scan Results" > scan-metadata.txt
          echo "============================" >> scan-metadata.txt
          echo "Scan Date: $(date)" >> scan-metadata.txt
          echo "Repository: $GITHUB_REPOSITORY" >> scan-metadata.txt
          echo "Branch: $GITHUB_REF_NAME" >> scan-metadata.txt
          echo "Commit: $GITHUB_SHA" >> scan-metadata.txt
          echo "Scan Level: ${{ inputs.scan_level }}" >> scan-metadata.txt
          echo "Workflow Run: $GITHUB_RUN_ID" >> scan-metadata.txt
          echo "Results Location: s3://$SCAN_BUCKET/$S3_PATH/" >> scan-metadata.txt
          
          aws s3 cp scan-metadata.txt "s3://$SCAN_BUCKET/$S3_PATH/" --region $REGION
          
          # Store S3 path for email notification
          echo "S3_RESULTS_PATH=$S3_PATH" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$SCAN_BUCKET" >> $GITHUB_ENV
          
          echo "‚úÖ Scan results uploaded to S3 successfully"
          echo "üìÅ Results location: s3://$SCAN_BUCKET/$S3_PATH/"
          
      - name: Send Email Notification
        if: inputs.email_notifications == 'true'
        run: |
          echo "=== Sending Email Notification ==="
          
          # Create email content
          echo "Subject: Fortify Security Scan Completed - $GITHUB_REPOSITORY" > /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Fortify Security Scan Results" >> /tmp/email_content.txt
          echo "============================" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Repository: $GITHUB_REPOSITORY" >> /tmp/email_content.txt
          echo "Branch: $GITHUB_REF_NAME" >> /tmp/email_content.txt
          echo "Scan Date: $(date)" >> /tmp/email_content.txt
          echo "Scan Level: ${{ inputs.scan_level }}" >> /tmp/email_content.txt
          echo "Workflow Run: $GITHUB_RUN_ID" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "Results Location: s3://${{ env.SCAN_RESULTS_BUCKET }}/${{ env.S3_RESULTS_PATH }}/" >> /tmp/email_content.txt
          echo "" >> /tmp/email_content.txt
          echo "This is an automated notification from the Fortify Security Scan workflow." >> /tmp/email_content.txt
          
          echo "üìß Email notification content prepared:"
          cat /tmp/email_content.txt
          
          echo "‚úÖ Email notification prepared (content shown above)"
          echo "üìß Recipient: ${{ env.NOTIFICATION_EMAIL }}"
          
      - name: Cleanup Temporary Files
        run: |
          echo "=== Cleanup Temporary Files ==="
          
          # Remove temporary installation files
          rm -rf /tmp/fortify-install
          
          # Remove temporary scan files
          rm -rf /tmp/fortify-scan-results
          
          echo "‚úÖ Temporary files cleaned up"
          
      - name: Success Summary
        run: |
          echo ""
          echo "üéâ FORTIFY SECURITY SCAN COMPLETED SUCCESSFULLY! üéâ"
          echo ""
          echo "üìã Scan Summary:"
          echo "- Repository: $GITHUB_REPOSITORY"
          echo "- Branch: $GITHUB_REF_NAME"
          echo "- Scan Level: ${{ inputs.scan_level }}"
          echo "- Scan Date: $(date)"
          echo ""
          echo "üìä Results:"
          echo "- S3 Bucket: ${{ env.SCAN_RESULTS_BUCKET }}"
          echo "- Results Path: ${{ env.S3_RESULTS_PATH }}"
          echo ""
          echo "üîç Next Steps:"
          echo "1. Review scan results in S3: s3://${{ env.SCAN_RESULTS_BUCKET }}/${{ env.S3_RESULTS_PATH }}/"
          echo "2. Open fortify-scan.html for detailed vulnerability report"
          echo "3. Check fortify-scan-summary.txt for quick overview"
          echo "4. Use fortify-scan.fpr for further analysis in Fortify tools"
          echo ""
          echo "‚úÖ Security scanning workflow completed successfully!"
          
      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "üßπ CLEANUP ON FAILURE - Freeing up disk space..."
          
          # Remove all temporary Fortify files
          rm -rf /tmp/fortify-install 2>/dev/null || true
          rm -rf /opt/fortify 2>/dev/null || true
          rm -rf /tmp/fortify-scan-results 2>/dev/null || true
          
          # Show final disk usage
          echo "üìä Final disk usage after cleanup:"
          df -h /tmp
          
          echo "‚úÖ Cleanup on failure completed"
          echo "üí° Tip: The workflow failed, but disk space has been freed for future runs"
