name: Provision Users on AWS EC2 Instances

on:
  workflow_dispatch:
    inputs:
      instance_ids:
        description: 'Comma-separated list of EC2 instance IDs'
        required: true
        type: string
      aws_region:
        description: 'AWS region'
        required: false
        default: 'us-west-2'
        type: string
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      send_emails:
        description: 'Send SSH keys to users via email'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main, master ]
    paths:
      - 'users.yaml'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'users.yaml'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  TF_VERSION: "1.5.0"
  PYTHON_VERSION: "3.9"

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: tmp-priv-docker4
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip python3 python3-pip jq
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
          
      - name: Validate Users YAML
        run: |
          python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              print(f'Found {len(data[\"users\"])} users in configuration')
              for user in data['users']:
                  if not all(k in user for k in ['username', 'email']):
                      raise ValueError(f'User {user} missing required fields')
                  print(f'  - {user[\"username\"]} ({user[\"email\"]})')
          "

  provision-users:
    name: Provision Users on EC2 Instances
    needs: validate
    runs-on: tmp-priv-docker4
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip python3 python3-pip jq awscli
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region || 'us-west-2' }}
          
      - name: Parse Instance IDs
        id: parse-instances
        run: |
          INSTANCE_IDS="${{ github.event.inputs.instance_ids }}"
          # Convert comma-separated string to JSON array
          INSTANCE_IDS_JSON=$(echo "$INSTANCE_IDS" | tr ',' '\n' | jq -R . | jq -s .)
          echo "instance_ids=$INSTANCE_IDS_JSON" >> $GITHUB_OUTPUT
          echo "Parsed instance IDs: $INSTANCE_IDS_JSON"
          
      - name: Create Keys Directory
        run: |
          cd terraform
          mkdir -p keys
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode - no actual changes will be made"
            terraform plan \
              -var="instance_ids=${{ steps.parse-instances.outputs.instance_ids }}" \
              -var="aws_region=${{ github.event.inputs.aws_region || 'us-west-2' }}" \
              -var="dry_run=true" \
              -detailed-exitcode
          else
            terraform plan \
              -var="instance_ids=${{ steps.parse-instances.outputs.instance_ids }}" \
              -var="aws_region=${{ github.event.inputs.aws_region || 'us-west-2' }}" \
              -var="dry_run=false" \
              -out=tfplan
          fi
        continue-on-error: true
        
      - name: Show Terraform Plan
        run: |
          cd terraform
          if [ -f "tfplan" ]; then
            terraform show tfplan
          else
            echo "No plan file found (dry run mode or no changes)"
          fi
          
      - name: Terraform Apply
        if: github.event.inputs.dry_run != 'true' && github.event.inputs.dry_run != true
        run: |
          cd terraform
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
          else
            echo "No plan file found - skipping apply"
          fi
          
      - name: Terraform Output
        run: |
          cd terraform
          terraform output -json > terraform_output.json
          echo "Terraform outputs saved to terraform_output.json"
          
      - name: Show Provisioning Summary
        run: |
          cd terraform
          echo "=== PROVISIONING SUMMARY ==="
          terraform output provisioning_summary
          echo ""
          echo "=== INSTANCES PROVISIONED ==="
          terraform output provisioned_instances
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform_output.json
          retention-days: 7

  send-email-keys:
    name: Send SSH Keys to Users
    needs: provision-users
    runs-on: tmp-priv-docker4
    if: |
      (github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      github.event.inputs.send_emails != 'false' &&
      github.event.inputs.dry_run != 'true' &&
      github.event.inputs.dry_run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pyyaml
          
      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/
          
      - name: Send SSH Keys via Email
        run: |
          python3 scripts/send_keys.py \
            --smtp-host "${{ secrets.SMTP_HOST }}" \
            --smtp-user "${{ secrets.SMTP_USER }}" \
            --smtp-pass "${{ secrets.SMTP_PASS }}" \
            --smtp-port "${{ secrets.SMTP_PORT || '587' }}" \
            --users-file users.yaml \
            --terraform-dir terraform

  dry-run-test:
    name: Dry Run Test
    runs-on: tmp-priv-docker4
    if: github.event.inputs.dry_run == 'true' || github.event.inputs.dry_run == true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pyyaml
          
      - name: Test Email Script (Dry Run)
        run: |
          python3 scripts/send_keys.py \
            --smtp-host "test.example.com" \
            --smtp-user "test@example.com" \
            --smtp-pass "testpass" \
            --dry-run \
            --users-file users.yaml \
            --terraform-dir terraform
        continue-on-error: true
        
      - name: Show Dry Run Results
        run: |
          echo "=== DRY RUN COMPLETED ==="
          echo "This was a dry run - no actual changes were made to EC2 instances"
          echo "No emails were sent"
          echo "Review the plan output above to see what would have been done" 