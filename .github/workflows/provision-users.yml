name: Provision Users on AWS EC2 Instances

on:
  workflow_dispatch:
    inputs:
      instance_ids:
        description: 'Comma-separated list of EC2 instance IDs'
        required: true
        type: string
      aws_region:
        description: 'AWS region'
        required: false
        default: 'us-west-2'
        type: string
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      send_emails:
        description: 'Send SSH keys to users via email'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main, master ]
    paths:
      - 'users.yaml'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'users.yaml'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  TF_VERSION: "1.5.0"
  PYTHON_VERSION: "3.9"

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: tmp-priv-docker4
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          # Check if we're running as root or need sudo
          if [ "$EUID" -eq 0 ]; then
            SUDO=""
          else
            SUDO="sudo"
          fi
          
          # Update package lists
          $SUDO apt-get update || true
          
          # Install packages with error handling
          $SUDO apt-get install -y curl unzip python3 python3-pip jq || {
            echo "Some packages failed to install, checking what's available..."
            # Check what's already available
            command -v curl >/dev/null 2>&1 || echo "curl not available"
            command -v unzip >/dev/null 2>&1 || echo "unzip not available"
            command -v python3 >/dev/null 2>&1 || echo "python3 not available"
            command -v pip3 >/dev/null 2>&1 || echo "pip3 not available"
            command -v jq >/dev/null 2>&1 || echo "jq not available"
          }
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check -recursive
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate
          
      - name: Validate Users YAML
        run: |
          python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              print(f'Found {len(data[\"users\"])} users in configuration')
              for user in data['users']:
                  if not all(k in user for k in ['username', 'email']):
                      raise ValueError(f'User {user} missing required fields')
                  print(f'  - {user[\"username\"]} ({user[\"email\"]})')
          "

  provision-users:
    name: Provision Users on EC2 Instances
    needs: validate
    runs-on: tmp-priv-docker4
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check runner environment
        run: |
          echo "=== Runner Environment Check ==="
          echo "User: $(whoami)"
          echo "EUID: $EUID"
          echo "Distribution: $(cat /etc/os-release | grep PRETTY_NAME || echo 'Unknown')"
          echo "Available commands:"
          command -v curl >/dev/null 2>&1 && echo "✓ curl available" || echo "✗ curl not found"
          command -v unzip >/dev/null 2>&1 && echo "✓ unzip available" || echo "✗ unzip not found"
          command -v python3 >/dev/null 2>&1 && echo "✓ python3 available" || echo "✗ python3 not found"
          command -v pip3 >/dev/null 2>&1 && echo "✓ pip3 available" || echo "✗ pip3 not found"
          command -v jq >/dev/null 2>&1 && echo "✓ jq available" || echo "✗ jq not found"
          command -v aws >/dev/null 2>&1 && echo "✓ aws CLI available" || echo "✗ aws CLI not found"
          command -v terraform >/dev/null 2>&1 && echo "✓ terraform available" || echo "✗ terraform not found"
          echo "================================"
        
      - name: Install dependencies
        run: |
          # Check if we're running as root or need sudo
          if [ "$EUID" -eq 0 ]; then
            SUDO=""
          else
            SUDO="sudo"
          fi
          
          # Detect package manager
          if command -v apt-get >/dev/null 2>&1; then
            echo "Using apt-get package manager"
            $SUDO apt-get update || true
            $SUDO apt-get install -y curl unzip python3 python3-pip jq awscli || {
              echo "Some apt packages failed to install, checking what's available..."
              command -v curl >/dev/null 2>&1 || echo "curl not available"
              command -v unzip >/dev/null 2>&1 || echo "unzip not available"
              command -v python3 >/dev/null 2>&1 || echo "python3 not available"
              command -v pip3 >/dev/null 2>&1 || echo "pip3 not available"
              command -v jq >/dev/null 2>&1 || echo "jq not available"
              command -v aws >/dev/null 2>&1 || echo "aws CLI not available"
            }
          elif command -v yum >/dev/null 2>&1; then
            echo "Using yum package manager"
            $SUDO yum update -y || true
            $SUDO yum install -y curl unzip python3 python3-pip jq awscli || {
              echo "Some yum packages failed to install, checking what's available..."
              command -v curl >/dev/null 2>&1 || echo "curl not available"
              command -v unzip >/dev/null 2>&1 || echo "unzip not available"
              command -v python3 >/dev/null 2>&1 || echo "python3 not available"
              command -v pip3 >/dev/null 2>&1 || echo "pip3 not available"
              command -v jq >/dev/null 2>&1 || echo "jq not available"
              command -v aws >/dev/null 2>&1 || echo "aws CLI not available"
            }
          elif command -v dnf >/dev/null 2>&1; then
            echo "Using dnf package manager"
            $SUDO dnf update -y || true
            $SUDO dnf install -y curl unzip python3 python3-pip jq awscli || {
              echo "Some dnf packages failed to install, checking what's available..."
              command -v curl >/dev/null 2>&1 || echo "curl not available"
              command -v unzip >/dev/null 2>&1 || echo "unzip not available"
              command -v python3 >/dev/null 2>&1 || echo "python3 not available"
              command -v pip3 >/dev/null 2>&1 || echo "pip3 not available"
              command -v jq >/dev/null 2>&1 || echo "jq not available"
              command -v aws >/dev/null 2>&1 || echo "aws CLI not available"
            }
          else
            echo "No supported package manager found (apt-get, yum, dnf)"
            echo "Checking what's already available..."
            command -v curl >/dev/null 2>&1 && echo "✓ curl available" || echo "✗ curl not found"
            command -v unzip >/dev/null 2>&1 && echo "✓ unzip available" || echo "✗ unzip not found"
            command -v python3 >/dev/null 2>&1 && echo "✓ python3 available" || echo "✗ python3 not found"
            command -v pip3 >/dev/null 2>&1 && echo "✓ pip3 available" || echo "✗ pip3 not found"
            command -v jq >/dev/null 2>&1 && echo "✓ jq available" || echo "✗ jq not found"
            command -v aws >/dev/null 2>&1 && echo "✓ aws CLI available" || echo "✗ aws CLI not found"
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region || 'us-west-2' }}
          
      - name: Verify AWS Credentials
        run: |
          echo "Verifying AWS credentials..."
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "❌ AWS credentials are not set"
            echo "Please check your GitHub secrets: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY"
            exit 1
          fi
          
          # Test AWS credentials
          aws sts get-caller-identity || {
            echo "❌ AWS credentials are invalid"
            echo "Please verify your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets"
            echo "Make sure the credentials have proper permissions for EC2 access"
            exit 1
          }
          
          echo "✅ AWS credentials verified successfully"
          aws sts get-caller-identity
          
      - name: Parse Instance IDs
        id: parse-instances
        run: |
          # Check if this is a manual workflow dispatch with instance IDs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.instance_ids }}" ]; then
            INSTANCE_IDS="${{ github.event.inputs.instance_ids }}"
            echo "Using manually provided instance IDs: $INSTANCE_IDS"
          else
            # For automatic triggers (push/PR), use a default or placeholder
            # You can modify this to use a default instance ID or skip the job
            echo "No instance IDs provided for automatic trigger"
            echo "This workflow requires manual trigger with instance IDs"
            echo "Please run this workflow manually and provide instance IDs"
            exit 1
          fi
          
          # Convert comma-separated string to JSON array
          INSTANCE_IDS_JSON=$(echo "$INSTANCE_IDS" | tr ',' '\n' | jq -R . | jq -s .)
          echo "instance_ids=$INSTANCE_IDS_JSON" >> $GITHUB_OUTPUT
          echo "Parsed instance IDs: $INSTANCE_IDS_JSON"
          
      - name: Create Keys Directory
        run: |
          cd terraform
          mkdir -p keys
          
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode - no actual changes will be made"
            terraform plan \
              -var="instance_ids=${{ steps.parse-instances.outputs.instance_ids }}" \
              -var="aws_region=${{ github.event.inputs.aws_region || 'us-west-2' }}" \
              -var="dry_run=true" \
              -detailed-exitcode
          else
            terraform plan \
              -var="instance_ids=${{ steps.parse-instances.outputs.instance_ids }}" \
              -var="aws_region=${{ github.event.inputs.aws_region || 'us-west-2' }}" \
              -var="dry_run=false" \
              -out=tfplan
          fi
        continue-on-error: true
        
      - name: Show Terraform Plan
        run: |
          cd terraform
          if [ -f "tfplan" ]; then
            terraform show tfplan
          else
            echo "No plan file found (dry run mode or no changes)"
          fi
          
      - name: Terraform Apply
        if: github.event.inputs.dry_run != 'true' && github.event.inputs.dry_run != true
        run: |
          cd terraform
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
          else
            echo "No plan file found - skipping apply"
          fi
          
      - name: Terraform Output
        run: |
          cd terraform
          terraform output -json > terraform_output.json
          echo "Terraform outputs saved to terraform_output.json"
          
      - name: Show Provisioning Summary
        run: |
          cd terraform
          echo "=== PROVISIONING SUMMARY ==="
          terraform output provisioning_summary
          echo ""
          echo "=== INSTANCES PROVISIONED ==="
          terraform output provisioned_instances
          
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/terraform_output.json
          retention-days: 7

  send-email-keys:
    name: Send SSH Keys to Users
    needs: provision-users
    runs-on: tmp-priv-docker4
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.send_emails != 'false' &&
      github.event.inputs.dry_run != 'true' &&
      github.event.inputs.dry_run != true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pyyaml
          
      - name: Download Terraform Outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/
          
      - name: Send SSH Keys via Email
        run: |
          python3 scripts/send_keys.py \
            --smtp-host "${{ secrets.SMTP_HOST }}" \
            --smtp-user "${{ secrets.SMTP_USER }}" \
            --smtp-pass "${{ secrets.SMTP_PASS }}" \
            --smtp-port "${{ secrets.SMTP_PORT || '587' }}" \
            --users-file users.yaml \
            --terraform-dir terraform

  dry-run-test:
    name: Dry Run Test
    runs-on: tmp-priv-docker4
    if: github.event_name == 'workflow_dispatch' && (github.event.inputs.dry_run == 'true' || github.event.inputs.dry_run == true)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install pyyaml
          
      - name: Test Email Script (Dry Run)
        run: |
          python3 scripts/send_keys.py \
            --smtp-host "test.example.com" \
            --smtp-user "test@example.com" \
            --smtp-pass "testpass" \
            --dry-run \
            --users-file users.yaml \
            --terraform-dir terraform
        continue-on-error: true
        
      - name: Show Dry Run Results
        run: |
          echo "=== DRY RUN COMPLETED ==="
          echo "This was a dry run - no actual changes were made to EC2 instances"
          echo "No emails were sent"
          echo "Review the plan output above to see what would have been done" 