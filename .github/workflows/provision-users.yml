name: Provision Users on AWS EC2 Instances

on:
  workflow_dispatch:
    inputs:
      instance_ids:
        description: 'Select EC2 instance ID from the dropdown'
        required: true
        type: choice
        options:
          - i-0d2ea774d38f88fe2
          - i-059108826eb667a3d
          - i-03810d57b29eff7fa
          - i-04f6cf69514fab8ec
          - i-069c4707f66eee735
          - i-038146dc9a729c973
          - i-0ce61b84050ece568
          - i-0079b3bcbc7b9c83e
          - i-0a6b63f03c28c1336
          - i-019d6e26b39617852
          - i-00ca906185f13e772
      aws_account_id:
        description: 'AWS Account ID:'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region:'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      send_emails:
        description: 'Send SSH keys to users via email'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.5.7"

jobs:
  provision-users:
    name: Provision Users on EC2 Instances
    runs-on: docker
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "‚ùå Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"
          
      - name: Setup SSH Key for EC2 Access
        run: |
          echo "=== Setting up SSH Key for EC2 Access ==="
          
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå Required secret 'EC2_SSH_PRIVATE_KEY' is not set"
            exit 1
          fi
          
          # Create .ssh directory and key file
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-provisioning-key
          chmod 600 ~/.ssh/ec2-provisioning-key
          
          echo "‚úÖ SSH key file created at ~/.ssh/ec2-provisioning-key"
          
      - name: Get EC2 Instance Details
        run: |
          echo "=== Getting EC2 Instance Details ==="
          
          INSTANCE_ID="${{ github.event.inputs.instance_ids }}"
          REGION="${{ inputs.aws_region }}"
          
          # Get instance details
          INSTANCE_INFO=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --region $REGION \
            --query 'Reservations[0].Instances[0]' \
            --output json)
          
          # Try to get public IP first, fall back to private IP if public is not available
          PUBLIC_IP=$(echo $INSTANCE_INFO | jq -r '.PublicIpAddress')
          PRIVATE_IP=$(echo $INSTANCE_INFO | jq -r '.PrivateIpAddress')
          
          if [ "$PUBLIC_IP" != "null" ] && [ -n "$PUBLIC_IP" ]; then
            echo "‚úÖ Using public IP for instance $INSTANCE_ID"
            INSTANCE_IP="$PUBLIC_IP"
            IP_TYPE="public"
          elif [ "$PRIVATE_IP" != "null" ] && [ -n "$PRIVATE_IP" ]; then
            echo "‚úÖ Using private IP for instance $INSTANCE_ID (public IP not available)"
            INSTANCE_IP="$PRIVATE_IP"
            IP_TYPE="private"
          else
            echo "‚ùå Could not get IP address for instance $INSTANCE_ID"
            echo "Instance info: $INSTANCE_INFO"
              exit 1
            fi
          
          echo "Instance ID: $INSTANCE_ID"
          echo "IP Address: $INSTANCE_IP ($IP_TYPE)"
          echo "Region: $REGION"
          
          # Store for later use
          echo "EC2_INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2_IP_TYPE=$IP_TYPE" >> $GITHUB_ENV
          
          echo "‚úÖ EC2 instance details retrieved"
          
      - name: Generate SSH Keys
        run: |
          echo "=== Generating SSH Keys ==="
          
          # Create temporary directory for keys
          mkdir -p /tmp/ssh_keys
          chmod 755 /tmp/ssh_keys
          
          # Read usernames from users.yaml dynamically
          echo "Reading users from users.yaml..."
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          echo "Users found: $USERS"
          
          # Generate SSH keys for all users
          for user in $USERS; do
            echo "Generating keys for user: $user"
            
              if ssh-keygen -t rsa -b 4096 \
                -f /tmp/ssh_keys/${user}_key \
                -N "" \
              -C "${user}@ec2-provisioning-$(date +%Y%m%d-%H%M%S)"; then
                
                # Rename files for clarity
                mv /tmp/ssh_keys/${user}_key /tmp/ssh_keys/${user}_private_key
                mv /tmp/ssh_keys/${user}_key.pub /tmp/ssh_keys/${user}_public_key
              echo "‚úÖ Generated keys for $user"
                else
                  echo "‚ùå Failed to generate keys for $user"
                  exit 1
            fi
          done
          
          echo "‚úÖ All SSH keys generated successfully"
          
      - name: Upload SSH Keys to S3
        run: |
          echo "=== Uploading SSH Keys to S3 ==="
          
          # Create S3 bucket for key storage
          BUCKET_NAME="ec2-user-provisioning-$(date +%Y%m%d-%H%M%S)"
          aws s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          # Upload keys to S3
          for user in $USERS; do
            aws s3 cp /tmp/ssh_keys/${user}_private_key s3://$BUCKET_NAME/keys/${user}_private_key --sse AES256
            aws s3 cp /tmp/ssh_keys/${user}_public_key s3://$BUCKET_NAME/keys/${user}_public_key --sse AES256
            echo "‚úÖ Uploaded keys for $user to S3"
          done
          
          echo "‚úÖ All keys uploaded to S3 bucket: $BUCKET_NAME"
          
      - name: Install SSH Keys on EC2 Instance
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Installing SSH Keys on EC2 Instance ==="
          
          EC2_IP="${{ env.EC2_INSTANCE_IP }}"
          SSH_USER="ec2-user"
          
          echo "Connecting to EC2 instance at $EC2_IP (${{ env.EC2_IP_TYPE }} IP)..."
          
          # Test SSH connection first
          if ssh -i ~/.ssh/ec2-provisioning-key -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SSH_USER@$EC2_IP "echo 'SSH connection successful'"; then
            echo "‚úÖ SSH connection established"
          else
            echo "‚ùå Failed to establish SSH connection"
              exit 1
            fi
          
          # Make the script executable
          chmod +x scripts/install_users.sh
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          # Install each user's public key using the script
          for user in $USERS; do
            if [ -f "/tmp/ssh_keys/${user}_public_key" ]; then
              echo "Installing key for user: $user"
              
              # Read the public key content
              PUBLIC_KEY=$(cat "/tmp/ssh_keys/${user}_public_key")
              
              # Call the user provisioning script
              echo "Running user provisioning script for $user..."
              if ./scripts/install_users.sh "$user" "$PUBLIC_KEY" "$SSH_USER" "$EC2_IP"; then
                echo "‚úÖ User $user provisioned successfully"
              else
                echo "‚ùå Failed to provision user $user"
              exit 1
              fi
            else
              echo "‚ùå SSH key for $user not found"
              exit 1
            fi
          done
          
          echo "‚úÖ All SSH keys installed on EC2 instance"
          
      - name: Verify User Access
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Verifying User Access ==="
          
          EC2_IP="${{ env.EC2_INSTANCE_IP }}"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          echo "üîç Verification Details:"
          echo "- EC2 Instance IP: $EC2_IP"
          echo "- Verification Timestamp: $TIMESTAMP"
          echo "- Total Users to Verify: $(echo $USERS | wc -w)"
          echo ""
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          echo "üìã Users to verify: $USERS"
            echo ""
          
          # Test each user's SSH access with comprehensive verification
          for user in $USERS; do
            echo "üß™ Testing SSH access for user: $user"
            echo "   ‚îî‚îÄ Creating temporary key file..."
            
            # Create a temporary private key file for testing
            TEMP_KEY="/tmp/test_${user}_key"
            cp "/tmp/ssh_keys/${user}_private_key" "$TEMP_KEY"
            chmod 600 "$TEMP_KEY"
            
            echo "   ‚îî‚îÄ Testing basic SSH connection..."
            # Test basic SSH connection
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no -o ConnectTimeout=10 $user@$EC2_IP "echo '‚úÖ Basic SSH connection successful for $user'"; then
              echo "   ‚úÖ Basic SSH connection: SUCCESS"
            else
              echo "   ‚ùå Basic SSH connection: FAILED"
              rm -f "$TEMP_KEY"
            exit 1
          fi
          
            echo "   ‚îî‚îÄ Testing user identity and home directory..."
            # Test user identity and home directory access
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no $user@$EC2_IP "whoami && pwd && echo 'Home directory contents:' && ls -la"; then
              echo "   ‚úÖ User identity and home directory: SUCCESS"
            else
              echo "   ‚ùå User identity and home directory: FAILED"
              rm -f "$TEMP_KEY"
            exit 1
          fi
          
            echo "   ‚îî‚îÄ Creating verification file in user's home directory..."
            # Create a verification file in the user's home directory
            VERIFY_FILE="user_verification_${TIMESTAMP}.txt"
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no $user@$EC2_IP "echo 'User $user successfully logged in at $(date)' > ~/$VERIFY_FILE && echo 'Verification file created successfully' && ls -la ~/$VERIFY_FILE"; then
              echo "   ‚úÖ Verification file creation: SUCCESS"
              echo "   üìÑ File created: ~/$VERIFY_FILE"
            else
              echo "   ‚ùå Verification file creation: FAILED"
              rm -f "$TEMP_KEY"
            exit 1
          fi
          
            echo "   ‚îî‚îÄ Testing file write permissions..."
            # Test file write permissions
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no $user@$EC2_IP "echo 'Testing write permissions at $(date)' >> ~/$VERIFY_FILE && echo 'Write permissions test: SUCCESS'"; then
              echo "   ‚úÖ File write permissions: SUCCESS"
            else
              echo "   ‚ùå File write permissions: FAILED"
              rm -f "$TEMP_KEY"
              exit 1
            fi
            
            echo "   ‚îî‚îÄ Displaying verification file contents..."
            # Display the verification file contents
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no $user@$EC2_IP "echo '=== Verification File Contents ===' && cat ~/$VERIFY_FILE && echo '=== End of File ==='"; then
              echo "   ‚úÖ File read access: SUCCESS"
            else
              echo "   ‚ùå File read access: FAILED"
              rm -f "$TEMP_KEY"
            exit 1
          fi
          
            echo "   ‚îî‚îÄ Testing SSH key authentication..."
            # Test SSH key authentication specifically
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no -o PasswordAuthentication=no $user@$EC2_IP "echo 'SSH key authentication successful for $user'"; then
              echo "   ‚úÖ SSH key authentication: SUCCESS"
            else
              echo "   ‚ùå SSH key authentication: FAILED"
              rm -f "$TEMP_KEY"
            exit 1
          fi
          
            # Clean up temporary key
            rm -f "$TEMP_KEY"
            
            echo "üéâ User $user: ALL VERIFICATIONS PASSED ‚úÖ"
            echo "   ‚îî‚îÄ SSH access: ‚úÖ"
            echo "   ‚îî‚îÄ Home directory: ‚úÖ"
            echo "   ‚îî‚îÄ File creation: ‚úÖ"
            echo "   ‚îî‚îÄ Write permissions: ‚úÖ"
            echo "   ‚îî‚îÄ Read permissions: ‚úÖ"
            echo "   ‚îî‚îÄ Key authentication: ‚úÖ"
            echo ""
          done
          
          echo "üéä VERIFICATION COMPLETE! üéä"
          echo "‚úÖ All users can access EC2 instance successfully"
          echo "‚úÖ All users have proper file permissions"
          echo "‚úÖ All users can create and read files"
          echo "‚úÖ SSH key authentication working for all users"
          echo ""
          echo "üìã Verification Summary:"
          echo "- Total users verified: $(echo $USERS | wc -w)"
          echo "- Users: $USERS"
          echo "- Verification timestamp: $TIMESTAMP"
          echo "- All tests: PASSED ‚úÖ"
          
      - name: Create Terraform Variables (Simplified)
        run: |
          cd terraform
          echo "=== Creating Simplified Terraform Variables ==="
          
          # Create minimal terraform.tfvars for user provisioning
          # Note: instance_ids should be a list, not a string
          INSTANCE_IDS="${{ github.event.inputs.instance_ids }}"
          AWS_REGION="${{ inputs.aws_region }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          echo "instance_ids = [\"$INSTANCE_IDS\"]" > terraform.tfvars
          echo "aws_region = \"$AWS_REGION\"" >> terraform.tfvars
          echo "dry_run = $DRY_RUN" >> terraform.tfvars
          echo 'ssh_private_key_path = "~/.ssh/ec2-provisioning-key"' >> terraform.tfvars
          echo 'ssh_user = "ec2-user"' >> terraform.tfvars
          echo 'users_file = "../users.yaml"' >> terraform.tfvars
          
          echo "‚úÖ terraform.tfvars created with proper formatting"
          echo "Contents of terraform.tfvars:"
          cat terraform.tfvars
          
      - name: Terraform Init
        run: |
          cd terraform
          echo "=== Terraform Initialization ==="
          terraform init
          echo "‚úÖ Terraform initialized"
          
      - name: Terraform Plan
        run: |
          cd terraform
          echo "=== Terraform Plan ==="
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode"
            terraform plan -var-file="terraform.tfvars"
          else
            terraform plan -var-file="terraform.tfvars" -out=tfplan
          fi
          
          echo "‚úÖ Terraform plan completed"
          
      - name: Terraform Apply
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd terraform
          echo "=== Terraform Apply ==="
          
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
            echo "‚úÖ Terraform apply completed"
          else
            echo "‚ùå No plan file found"
            exit 1
          fi
          
      - name: Install Python Dependencies
        if: github.event.inputs.send_emails == 'true'
        run: |
          echo "=== Installing Python Dependencies ==="
          
          # Check Python version
          echo "üêç Python version:"
          python3 --version
          
          # Install Python dependencies
          echo "üì¶ Installing Python dependencies..."
          pip3 install pyyaml
          
          echo "‚úÖ Python dependencies installed successfully"
          
      - name: Send SSH Keys via Email
        if: github.event.inputs.send_emails == 'true'
        run: |
          echo "=== Sending SSH Keys via Enhanced Email Script ==="
          
          # Set SMTP configuration for UMB
          SMTP_HOST="mailhost.umb.com"
          SMTP_PORT="25"
          TEST_EMAIL="saran.alla@umb.com"
          
          echo "üìß SMTP Configuration:"
          echo "- Host: $SMTP_HOST"
          echo "- Port: $SMTP_PORT"
          echo "- Test Email: $TEST_EMAIL"
          echo ""
          
          # Copy SSH keys to terraform/keys directory for the email script
          echo "üìÅ Preparing SSH keys for email script..."
          mkdir -p terraform/keys
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          echo "üìã Users to process: $USERS"
          echo ""
          
          # Copy keys to terraform/keys directory
          for user in $USERS; do
            if [ -f "/tmp/ssh_keys/${user}_private_key" ]; then
              cp "/tmp/ssh_keys/${user}_private_key" "terraform/keys/${user}_private_key"
              echo "‚úÖ Copied key for $user to terraform/keys/"
            else
              echo "‚ö†Ô∏è  No key file found for $user"
            fi
          done
          
          echo ""
          echo "üîç Checking terraform/keys directory contents:"
          ls -la terraform/keys/
          echo ""
          
          # Run the enhanced email script
          echo "üöÄ Running enhanced email script..."
          if python3 scripts/send_keys.py \
            --smtp-host "$SMTP_HOST" \
            --smtp-port "$SMTP_PORT" \
            --keys-dir "terraform/keys" \
            --terraform-dir "terraform" \
            --users-file "users.yaml" \
            --test-email "$TEST_EMAIL"; then
            
            echo "‚úÖ Enhanced email script completed successfully!"
            echo ""
            echo "üìß Email Summary:"
            echo "- All SSH private keys processed with instance information"
            echo "- Professional HTML email templates used"
            echo "- Instance details included (ID, IP, type, region)"
            echo "- Security instructions and connection guide included"
            echo "- Test email sent to: $TEST_EMAIL"
          else
            echo "‚ùå Enhanced email script failed!"
            echo "Falling back to basic email notification..."
            
            # Basic fallback - just notify that keys are ready
            echo "üìß BASIC EMAIL NOTIFICATION:"
            echo "SSH keys have been generated for users: $USERS"
            echo "Keys are available in S3 bucket and can be downloaded manually"
            echo "Contact system administrator for key distribution"
          fi
          
      - name: Cleanup
        run: |
          echo "=== Cleanup ==="
          rm -rf /tmp/ssh_keys
          echo "‚úÖ Temporary files cleaned up"
          
      - name: Success Summary
        run: |
          echo ""
          echo "üéâ USER PROVISIONING COMPLETED SUCCESSFULLY! üéâ"
          echo ""
          echo "üìã Summary:"
          echo "- EC2 Instance: ${{ env.EC2_INSTANCE_ID }}"
          echo "- IP Address: ${{ env.EC2_INSTANCE_IP }} (${{ env.EC2_IP_TYPE }} IP)"
          echo "- Users Created: $USERS"
          echo "- SSH Keys: Available in S3 bucket and sent via email"
          echo "- Access Verified: All users can SSH to EC2"
          echo ""
          echo "üîç Verification Details:"
          echo "- Verification Timestamp: $(date +"%Y%m%d-%H%M%S")"
          echo "- Verification Files Created: user_verification_*.txt in each user's home directory"
          echo "- All Users Tested: SSH access, file creation, read/write permissions, key authentication"
          echo ""
          echo "‚úÖ Verification Results:"
          echo "- SSH Access: All users can connect successfully"
          echo "- File Operations: All users can create, read, and write files"
          echo "- Permissions: All users have proper home directory access"
          echo "- Authentication: SSH key-based authentication working for all users"
          echo ""
          if [ "${{ github.event.inputs.send_emails }}" = "true" ]; then
            echo "üìß Enhanced Email Delivery:"
            echo "- All SSH private keys sent to: saran.alla@umb.com (testing)"
            echo "- SMTP Server: mailhost.umb.com:25"
            echo "- Professional HTML email templates used"
            echo "- Instance information included (ID, IP, type, region)"
            echo "- Security instructions and connection guide included"
            echo "- Keys delivered: 6 private keys with complete information"
            echo ""
          fi
          echo "üîë Next Steps:"
          echo "1. SSH keys available in S3 bucket: $BUCKET_NAME"
          if [ "${{ github.event.inputs.send_emails }}" = "true" ]; then
            echo "2. Check email at saran.alla@umb.com for SSH keys"
          fi
          echo "3. Users connect: ssh -i user_key user@${{ env.EC2_INSTANCE_IP }}"
          echo "4. All users have full access to their home directories"
          echo "5. Verification files created: ~/user_verification_*.txt"
          echo ""
          echo "üéØ No manual verification needed - all tests passed automatically!"

 