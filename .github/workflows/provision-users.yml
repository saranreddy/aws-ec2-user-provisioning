name: Provision Users on AWS EC2 Instances

on:
  workflow_dispatch:
    inputs:
      instance_ids:
        description: 'Select EC2 instance ID from the dropdown'
        required: true
        type: choice
        options:
          - i-0d2ea774d38f88fe2
          - i-059108826eb667a3d
          - i-03810d57b29eff7fa
          - i-04f6cf69514fab8ec
          - i-069c4707f66eee735
          - i-038146dc9a729c973
          - i-0ce61b84050ece568
          - i-0079b3bcbc7b9c83e
          - i-0a6b63f03c28c1336
          - i-019d6e26b39617852
          - i-00ca906185f13e772
      aws_account_id:
        description: 'AWS Account ID:'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region:'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      send_emails:
        description: 'Send SSH keys to users via email'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.5.7"

jobs:
  provision-users:
    name: Provision Users on EC2 Instances
    runs-on: docker
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "❌ Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "✅ AWS credentials verified"
          
      - name: Setup SSH Key for EC2 Access
        run: |
          echo "=== Setting up SSH Key for EC2 Access ==="
          
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            echo "❌ Required secret 'EC2_SSH_PRIVATE_KEY' is not set"
            exit 1
          fi
          
          # Create .ssh directory and key file
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-provisioning-key
          chmod 600 ~/.ssh/ec2-provisioning-key
          
          echo "✅ SSH key file created at ~/.ssh/ec2-provisioning-key"
          
      - name: Get EC2 Instance Details
        run: |
          echo "=== Getting EC2 Instance Details ==="
          
          INSTANCE_ID="${{ github.event.inputs.instance_ids }}"
          REGION="${{ inputs.aws_region }}"
          
          # Get instance details
          INSTANCE_INFO=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --region $REGION \
            --query 'Reservations[0].Instances[0]' \
            --output json)
          
          # Try to get public IP first, fall back to private IP if public is not available
          PUBLIC_IP=$(echo $INSTANCE_INFO | jq -r '.PublicIpAddress')
          PRIVATE_IP=$(echo $INSTANCE_INFO | jq -r '.PrivateIpAddress')
          
          if [ "$PUBLIC_IP" != "null" ] && [ -n "$PUBLIC_IP" ]; then
            echo "✅ Using public IP for instance $INSTANCE_ID"
            INSTANCE_IP="$PUBLIC_IP"
            IP_TYPE="public"
          elif [ "$PRIVATE_IP" != "null" ] && [ -n "$PRIVATE_IP" ]; then
            echo "✅ Using private IP for instance $INSTANCE_ID (public IP not available)"
            INSTANCE_IP="$PRIVATE_IP"
            IP_TYPE="private"
          else
            echo "❌ Could not get IP address for instance $INSTANCE_ID"
            echo "Instance info: $INSTANCE_INFO"
              exit 1
            fi
          
          echo "Instance ID: $INSTANCE_ID"
          echo "IP Address: $INSTANCE_IP ($IP_TYPE)"
          echo "Region: $REGION"
          
          # Store for later use
          echo "EC2_INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV
          echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2_IP_TYPE=$IP_TYPE" >> $GITHUB_ENV
          
          echo "✅ EC2 instance details retrieved"
          
      - name: Generate SSH Keys
        run: |
          echo "=== Generating SSH Keys ==="
          
          # Create temporary directory for keys
          mkdir -p /tmp/ssh_keys
          chmod 755 /tmp/ssh_keys
          
          # Read usernames from users.yaml dynamically
          echo "Reading users from users.yaml..."
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          echo "Users found: $USERS"
          
          # Generate SSH keys for all users
          for user in $USERS; do
            echo "Generating keys for user: $user"
            
              if ssh-keygen -t rsa -b 4096 \
                -f /tmp/ssh_keys/${user}_key \
                -N "" \
              -C "${user}@ec2-provisioning-$(date +%Y%m%d-%H%M%S)"; then
                
                # Rename files for clarity
                mv /tmp/ssh_keys/${user}_key /tmp/ssh_keys/${user}_private_key
                mv /tmp/ssh_keys/${user}_key.pub /tmp/ssh_keys/${user}_public_key
              echo "✅ Generated keys for $user"
                else
                  echo "❌ Failed to generate keys for $user"
                  exit 1
            fi
          done
          
          echo "✅ All SSH keys generated successfully"
          
      - name: Upload SSH Keys to S3
        run: |
          echo "=== Uploading SSH Keys to S3 ==="
          
          # Create S3 bucket for key storage
          BUCKET_NAME="ec2-user-provisioning-$(date +%Y%m%d-%H%M%S)"
          aws s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          # Upload keys to S3
          for user in $USERS; do
            aws s3 cp /tmp/ssh_keys/${user}_private_key s3://$BUCKET_NAME/keys/${user}_private_key --sse AES256
            aws s3 cp /tmp/ssh_keys/${user}_public_key s3://$BUCKET_NAME/keys/${user}_public_key --sse AES256
            echo "✅ Uploaded keys for $user to S3"
          done
          
          echo "✅ All keys uploaded to S3 bucket: $BUCKET_NAME"
          
      - name: Install SSH Keys on EC2 Instance
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Installing SSH Keys on EC2 Instance ==="
          
          EC2_IP="${{ env.EC2_INSTANCE_IP }}"
          SSH_USER="ec2-user"
          
          echo "Connecting to EC2 instance at $EC2_IP (${{ env.EC2_IP_TYPE }} IP)..."
          
          # Test SSH connection first
          if ssh -i ~/.ssh/ec2-provisioning-key -o StrictHostKeyChecking=no -o ConnectTimeout=10 $SSH_USER@$EC2_IP "echo 'SSH connection successful'"; then
            echo "✅ SSH connection established"
          else
            echo "❌ Failed to establish SSH connection"
            exit 1
          fi
          
          # Make the script executable
          chmod +x scripts/install_users.sh
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          # Install each user's public key using the script
          for user in $USERS; do
            if [ -f "/tmp/ssh_keys/${user}_public_key" ]; then
              echo "Installing key for user: $user"
              
              # Read the public key content
              PUBLIC_KEY=$(cat "/tmp/ssh_keys/${user}_public_key")
              
              # Call the user provisioning script
              echo "Running user provisioning script for $user..."
              if ./scripts/install_users.sh "$user" "$PUBLIC_KEY" "$SSH_USER" "$EC2_IP"; then
                echo "✅ User $user provisioned successfully"
              else
                echo "❌ Failed to provision user $user"
              exit 1
            fi
          else
              echo "❌ SSH key for $user not found"
            exit 1
          fi
          done
          
          echo "✅ All SSH keys installed on EC2 instance"
          
      - name: Verify User Access
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "=== Verifying User Access ==="
          
          EC2_IP="${{ env.EC2_INSTANCE_IP }}"
          
          # Read usernames from users.yaml dynamically
          USERS=$(python3 -c "
          import yaml
          with open('users.yaml', 'r') as f:
              data = yaml.safe_load(f)
              users = [user['username'] for user in data['users']]
              print(' '.join(users))
          ")
          
          # Test each user's SSH access
          for user in $USERS; do
            echo "Testing SSH access for user: $user"
            
            # Create a temporary private key file for testing
            TEMP_KEY="/tmp/test_${user}_key"
            cp "/tmp/ssh_keys/${user}_private_key" "$TEMP_KEY"
            chmod 600 "$TEMP_KEY"
            
            # Test SSH connection
            if ssh -i "$TEMP_KEY" -o StrictHostKeyChecking=no -o ConnectTimeout=10 $user@$EC2_IP "echo 'User $user can access EC2 successfully'"; then
              echo "✅ User $user can access EC2 instance"
            else
              echo "❌ User $user cannot access EC2 instance"
            exit 1
          fi
          
            # Clean up temporary key
            rm -f "$TEMP_KEY"
          done
          
          echo "✅ All users can access EC2 instance successfully"
          
      - name: Create Terraform Variables (Simplified)
        run: |
          cd terraform
          echo "=== Creating Simplified Terraform Variables ==="
          
          # Create minimal terraform.tfvars for user provisioning
          # Note: instance_ids should be a list, not a string
          INSTANCE_IDS="${{ github.event.inputs.instance_ids }}"
          AWS_REGION="${{ inputs.aws_region }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          echo "instance_ids = [\"$INSTANCE_IDS\"]" > terraform.tfvars
          echo "aws_region = \"$AWS_REGION\"" >> terraform.tfvars
          echo "dry_run = $DRY_RUN" >> terraform.tfvars
          echo 'ssh_private_key_path = "~/.ssh/ec2-provisioning-key"' >> terraform.tfvars
          echo 'ssh_user = "ec2-user"' >> terraform.tfvars
          echo 'users_file = "../users.yaml"' >> terraform.tfvars
          
          echo "✅ terraform.tfvars created with proper formatting"
          echo "Contents of terraform.tfvars:"
          cat terraform.tfvars
          
      - name: Terraform Init
        run: |
          cd terraform
          echo "=== Terraform Initialization ==="
          terraform init
          echo "✅ Terraform initialized"
          
      - name: Terraform Plan
        run: |
          cd terraform
          echo "=== Terraform Plan ==="
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode"
            terraform plan -var-file="terraform.tfvars"
          else
            terraform plan -var-file="terraform.tfvars" -out=tfplan
          fi
          
          echo "✅ Terraform plan completed"
          
      - name: Terraform Apply
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd terraform
          echo "=== Terraform Apply ==="
          
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
            echo "✅ Terraform apply completed"
          else
            echo "❌ No plan file found"
            exit 1
          fi
          
      - name: Send SSH Keys via Email
        if: github.event.inputs.send_emails == 'true'
        run: |
          echo "=== Email Functionality ==="
          echo "Email functionality would be implemented here"
          echo "Keys are available in S3 for manual distribution"
          echo "S3 Bucket: $BUCKET_NAME"
          
      - name: Cleanup
        run: |
          echo "=== Cleanup ==="
          rm -rf /tmp/ssh_keys
          echo "✅ Temporary files cleaned up"
          
      - name: Success Summary
        run: |
          echo ""
          echo "🎉 USER PROVISIONING COMPLETED SUCCESSFULLY! 🎉"
          echo ""
          echo "📋 Summary:"
          echo "- EC2 Instance: ${{ env.EC2_INSTANCE_ID }}"
          echo "- IP Address: ${{ env.EC2_INSTANCE_IP }} (${{ env.EC2_IP_TYPE }} IP)"
          echo "- Users Created: $USERS"
          echo "- SSH Keys: Available in S3 bucket"
          echo "- Access Verified: All users can SSH to EC2"
          echo ""
          echo "🔑 Next Steps:"
          echo "1. Users download their private keys from S3"
          echo "2. Users connect: ssh -i user_key user@${{ env.EC2_INSTANCE_IP }}"
          echo "3. All users have full access to their home directories"

 