name: Provision Users on AWS EC2 Instances

on:
  workflow_dispatch:
    inputs:
      instance_ids:
        description: 'Select EC2 instance ID from the dropdown'
        required: true
        type: choice
        options:
          - i-0d2ea774d38f88fe2
          - i-059108826eb667a3d
          - i-03810d57b29eff7fa
          - i-04f6cf69514fab8ec
          - i-069c4707f66eee735
          - i-038146dc9a729c973
          - i-0ce61b84050ece568
          - i-0079b3bcbc7b9c83e
          - i-0a6b63f03c28c1336
          - i-019d6e26b39617852
          - i-00ca906185f13e772
      aws_account_id:
        description: 'AWS Account ID:'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region:'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        default: false
        type: boolean
      send_emails:
        description: 'Send SSH keys to users via email'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.5.7"

jobs:
  provision-users:
    name: Provision Users on EC2 Instances
    runs-on: docker
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "❌ Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "✅ AWS credentials verified"
          
      - name: Setup SSH Key for EC2 Access
        run: |
          echo "=== Setting up SSH Key for EC2 Access ==="
          
          if [ -z "${{ secrets.EC2_SSH_PRIVATE_KEY }}" ]; then
            echo "❌ Required secret 'EC2_SSH_PRIVATE_KEY' is not set"
            exit 1
          fi
          
          # Create .ssh directory and key file
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-provisioning-key
          chmod 600 ~/.ssh/ec2-provisioning-key
          
          echo "✅ SSH key file created at ~/.ssh/ec2-provisioning-key"
          
      - name: Generate SSH Keys
        run: |
          echo "=== Generating SSH Keys ==="
          
          # Create temporary directory for keys
          mkdir -p /tmp/ssh_keys
          chmod 755 /tmp/ssh_keys
          
          # Generate SSH keys for all users
          for user in alice bob charlie diana eve; do
            echo "Generating keys for user: $user"
            
            if ssh-keygen -t rsa -b 4096 \
              -f /tmp/ssh_keys/${user}_key \
              -N "" \
              -C "${user}@ec2-provisioning-$(date +%Y%m%d-%H%M%S)"; then
              
              # Rename files for clarity
              mv /tmp/ssh_keys/${user}_key /tmp/ssh_keys/${user}_private_key
              mv /tmp/ssh_keys/${user}_key.pub /tmp/ssh_keys/${user}_public_key
              echo "✅ Generated keys for $user"
            else
              echo "❌ Failed to generate keys for $user"
              exit 1
            fi
          done
          
          echo "✅ All SSH keys generated successfully"
          
      - name: Create Terraform Variables
        run: |
          cd terraform
          echo "=== Creating Terraform Variables ==="
          
          # Create a simple terraform.tfvars file
          cat > terraform.tfvars << 'EOF'
          instance_ids = ["${{ github.event.inputs.instance_ids }}"]
          aws_region = "${{ inputs.aws_region }}"
          dry_run = ${{ github.event.inputs.dry_run }}
          ssh_private_key_path = "~/.ssh/ec2-provisioning-key"
          ssh_user = "ec2-user"
          users_file = "../users.yaml"
          
          user_public_keys = {
            alice = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
            bob = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
            charlie = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
            diana = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
            eve = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
          }
          EOF
          
          echo "✅ terraform.tfvars created with placeholder SSH keys"
          echo "Note: SSH keys will be updated with actual content in the next step"
          
      - name: Update SSH Keys in Terraform Variables
        run: |
          cd terraform
          echo "=== Updating SSH Keys in Terraform Variables ==="
          
          # Update the terraform.tfvars file with actual SSH keys
          for user in alice bob charlie diana eve; do
            if [ -f "/tmp/ssh_keys/${user}_public_key" ]; then
              KEY_CONTENT=$(cat "/tmp/ssh_keys/${user}_public_key" | tr -d '\n' | sed 's/"/\\"/g')
              # Use sed to replace the placeholder with actual key
              sed -i "s/ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC.../${KEY_CONTENT}/g" terraform.tfvars
              echo "✅ Updated key for $user"
            else
              echo "❌ SSH key for $user not found"
              exit 1
            fi
          done
          
          echo ""
          echo "✅ terraform.tfvars updated with actual SSH keys"
          echo "File contents:"
          cat terraform.tfvars
          
      - name: Terraform Init
        run: |
          cd terraform
          echo "=== Terraform Initialization ==="
          terraform init
          echo "✅ Terraform initialized"
          
      - name: Terraform Plan
        run: |
          cd terraform
          echo "=== Terraform Plan ==="
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Running in dry-run mode"
            terraform plan -var-file="terraform.tfvars"
          else
            terraform plan -var-file="terraform.tfvars" -out=tfplan
          fi
          
          echo "✅ Terraform plan completed"
          
      - name: Terraform Apply
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd terraform
          echo "=== Terraform Apply ==="
          
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
            echo "✅ Terraform apply completed"
          else
            echo "❌ No plan file found"
            exit 1
          fi
          
      - name: Upload SSH Keys to S3
        run: |
          echo "=== Uploading SSH Keys to S3 ==="
          
          # Create S3 bucket for key storage
          BUCKET_NAME="ec2-user-provisioning-$(date +%Y%m%d-%H%M%S)"
          aws s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          
          # Upload keys to S3
          for user in alice bob charlie diana eve; do
            aws s3 cp /tmp/ssh_keys/${user}_private_key s3://$BUCKET_NAME/keys/${user}_private_key --sse AES256
            aws s3 cp /tmp/ssh_keys/${user}_public_key s3://$BUCKET_NAME/keys/${user}_public_key --sse AES256
            echo "✅ Uploaded keys for $user to S3"
          done
          
          echo "✅ All keys uploaded to S3 bucket: $BUCKET_NAME"
          
      - name: Send SSH Keys via Email
        if: github.event.inputs.send_emails == 'true'
        run: |
          echo "=== Email Functionality ==="
          echo "Email functionality would be implemented here"
          echo "Keys are available in S3 for manual distribution"
          
      - name: Cleanup
        run: |
          echo "=== Cleanup ==="
          rm -rf /tmp/ssh_keys
          echo "✅ Temporary files cleaned up"

 