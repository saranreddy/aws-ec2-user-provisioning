name: Fortify Security Scan

on:
  workflow_dispatch:
    inputs:
      fortify_version:
        description: 'Fortify version to install'
        required: true
        default: '24.2.0'
        type: string
      s3_bucket:
        description: 'S3 bucket containing Fortify files'
        required: true
        default: 'aws-ec2-user-provisioning-security-files'
        type: string
      scan_directory:
        description: 'Directory to scan for security vulnerabilities'
        required: true
        default: '.'
        type: string

env:
  FORTIFY_HOME: /opt/fortify
  FORTIFY_SCA_HOME: /opt/fortify/fortify-sca
  FORTIFY_APPS_HOME: /opt/fortify/fortify-apps
  PATH: "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"

jobs:
  fortify-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup System Environment
        run: |
          echo "=== Setting up system environment ==="
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "‚úÖ System environment configured"
          
      - name: Install System Dependencies
        run: |
          echo "=== Installing system dependencies ==="
          sudo apt-get update -qq
          
          # Install essential packages
          sudo apt-get install -y \
            coreutils \
            unzip \
            wget \
            curl \
            default-jre \
            default-jdk \
            python3 \
            python3-pip \
            ca-certificates \
            gnupg \
            lsb-release
          
          # Ensure all system binaries are in PATH
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          
          echo "‚úÖ System dependencies installed and PATH configured"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"
          
      - name: Create Fortify Installation Directory
        run: |
          echo "=== Creating Fortify installation directory ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          sudo mkdir -p ${{ env.FORTIFY_HOME }}
          sudo chown $USER:$USER ${{ env.FORTIFY_HOME }}
          chmod 755 ${{ env.FORTIFY_HOME }}
          
          # Verify commands are accessible
          which mkdir && which chown && which chmod
          
          echo "‚úÖ Fortify directory created: ${{ env.FORTIFY_HOME }}"
          
      - name: Download Fortify Installation Files from S3
        run: |
          echo "=== Downloading Fortify files from S3 ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          S3_BUCKET="${{ inputs.s3_bucket }}"
          FORTIFY_VERSION="${{ inputs.fortify_version }}"
          
          echo "Downloading from S3 bucket: $S3_BUCKET"
          echo "Fortify version: $FORTIFY_VERSION"
          
          # Verify AWS CLI is accessible (configured by aws-actions/configure-aws-credentials)
          which aws
          
          # Download Fortify SCA installer
          echo "üì• Downloading Fortify SCA installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_SCA_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download Fortify Apps and Tools installer
          echo "üì• Downloading Fortify Apps and Tools installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_Apps_and_Tools_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download license file
          echo "üì• Downloading Fortify license..."
          aws s3 cp "s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/fortify-license" ${{ env.FORTIFY_HOME }}/fortify.license
          
          # Make installer executable
          chmod +x ${{ env.FORTIFY_HOME }}/*.run
          
          echo "‚úÖ All Fortify files downloaded from S3"
          ls -la ${{ env.FORTIFY_HOME }}/
          
      - name: Install Fortify SCA
        run: |
          echo "=== Installing Fortify SCA ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          cd ${{ env.FORTIFY_HOME }}
          
          # Install Fortify SCA
          echo "üîß Installing Fortify SCA..."
          if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_SCA_HOME }}; then
            echo "‚úÖ Fortify SCA installed successfully"
          else
            echo "‚ö†Ô∏è  Installation failed, trying default location..."
            if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended; then
              echo "‚úÖ Fortify SCA installed to default location"
              echo "FORTIFY_SCA_HOME=/opt/fortify/fortify-sca" >> $GITHUB_ENV
            else
              echo "‚ùå Fortify SCA installation failed"
              exit 1
            fi
          fi
          
          # Set environment variables
          echo "FORTIFY_SCA_HOME=${{ env.FORTIFY_SCA_HOME }}" >> $GITHUB_ENV
          echo "PATH=\$PATH:\$FORTIFY_SCA_HOME/bin" >> $GITHUB_ENV
          
      - name: Install Fortify Apps and Tools
        run: |
          echo "=== Installing Fortify Apps and Tools ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          cd ${{ env.FORTIFY_HOME }}
          
          echo "üîß Installing Fortify Apps and Tools..."
          if ./Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_APPS_HOME }}; then
            echo "‚úÖ Fortify Apps and Tools installed successfully"
          else
            echo "‚ö†Ô∏è  Installation failed, trying default location..."
            if ./Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended; then
              echo "‚úÖ Fortify Apps and Tools installed to default location"
              echo "FORTIFY_APPS_HOME=/opt/fortify/fortify-apps" >> $GITHUB_ENV
            fi
          fi
          
          # Set environment variables
          echo "FORTIFY_APPS_HOME=${{ env.FORTIFY_APPS_HOME }}" >> $GITHUB_ENV
          echo "PATH=\$PATH:\$FORTIFY_APPS_HOME/bin" >> $GITHUB_ENV
          
      - name: Verify Fortify Installation
        run: |
          echo "=== Verifying Fortify installation ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          
          # Verify PATH is set correctly
          echo "üîç Current PATH: $PATH"
          echo "üîç FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }}"
          echo "üîç FORTIFY_APPS_HOME: ${{ env.FORTIFY_APPS_HOME }}"
          
          # Check if sourceanalyzer is available
          if [ -f "${{ env.FORTIFY_SCA_HOME }}/bin/sourceanalyzer" ]; then
            echo "‚úÖ sourceanalyzer found at: ${{ env.FORTIFY_SCA_HOME }}/bin/sourceanalyzer"
            ${{ env.FORTIFY_SCA_HOME }}/bin/sourceanalyzer -version
          else
            echo "‚ùå sourceanalyzer not found"
            exit 1
          fi
          
          # Check if ReportGenerator is available
          if [ -f "${{ env.FORTIFY_APPS_HOME }}/bin/ReportGenerator" ]; then
            echo "‚úÖ ReportGenerator found at: ${{ env.FORTIFY_APPS_HOME }}/bin/ReportGenerator"
            ${{ env.FORTIFY_APPS_HOME }}/bin/ReportGenerator -version
          else
            echo "‚ùå ReportGenerator not found"
            exit 1
          fi
          
          # Verify commands are in PATH
          which sourceanalyzer && which ReportGenerator
          
          echo "‚úÖ Fortify installation verified successfully"
          
      - name: Extract Fortify Rules from ScanCentral Controller
        run: |
          echo "=== Extracting Fortify Rules from ScanCentral Controller ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          # Initialize variables
          RULES_DIR="/opt/fortify/guaranteed-rules"
          RULES_COUNT=0
          RULES_SIZE=0
          SCANCENTRAL_DOWNLOADED="false"
          SCANCENTRAL_EXTRACTED="false"
          
          # S3 Configuration
          S3_BUCKET="aws-ec2-user-provisioning-security-files"
          S3_PATH="fortify/24.2.0/components"
          SCANCENTRAL_FILE="Fortify_ScanCentral_Controller_24.2.0_x64.zip"
          S3_URI="s3://$S3_BUCKET/$S3_PATH/$SCANCENTRAL_FILE"
          TEMP_DIR="/tmp/fortify-rules-extraction"
          
          # Create temporary directory
          mkdir -p $TEMP_DIR
          cd $TEMP_DIR
          
          echo "üì• Step 1: Downloading ScanCentral Controller from S3..."
          echo "   - S3 URI: $S3_URI"
          echo "   - Local path: $TEMP_DIR/$SCANCENTRAL_FILE"
          
          # Download ScanCentral Controller
          if aws s3 cp "$S3_URI" "$TEMP_DIR/$SCANCENTRAL_FILE" --quiet; then
            echo "‚úÖ ScanCentral Controller download successful"
            SCANCENTRAL_DOWNLOADED="true"
            
            # Verify file was downloaded and has content
            if [ -f "$TEMP_DIR/$SCANCENTRAL_FILE" ] && [ -s "$TEMP_DIR/$SCANCENTRAL_FILE" ]; then
              DOWNLOAD_SIZE=$(stat -c%s "$TEMP_DIR/$SCANCENTRAL_FILE" 2>/dev/null || echo 0)
              echo "   - File size: $DOWNLOAD_SIZE bytes"
              echo "   - Expected size: ~94 MB (94,153 KB)"
              
              if [ "$DOWNLOAD_SIZE" -gt 90000000 ]; then
                echo "‚úÖ File size verification passed (sufficiently large)"
              else
                echo "‚ö†Ô∏è  File size verification failed (too small, may be corrupted)"
                SCANCENTRAL_DOWNLOADED="false"
              fi
            else
              echo "‚ùå Downloaded file is empty or missing"
              SCANCENTRAL_DOWNLOADED="false"
            fi
          else
            echo "‚ùå ScanCentral Controller download failed"
            SCANCENTRAL_DOWNLOADED="false"
          fi
          
          # Extract ScanCentral Controller if download was successful
          if [ "$SCANCENTRAL_DOWNLOADED" = "true" ]; then
            echo ""
            echo "üì¶ Step 2: Extracting ScanCentral Controller ZIP file..."
            
            # Extract the ZIP file completely
            if unzip -q "$TEMP_DIR/$SCANCENTRAL_FILE" -d "$RULES_DIR/"; then
              echo "‚úÖ ScanCentral Controller extraction successful"
              SCANCENTRAL_EXTRACTED="true"
              
              # Verify extraction results
              echo "üîç Verifying extracted contents..."
              EXTRACTED_FILES=$(find "$RULES_DIR" -type f 2>/dev/null | wc -l)
              EXTRACTED_SIZE=$(du -sb "$RULES_DIR" 2>/dev/null | cut -f1 || echo 0)
              
              echo "   - Files extracted: $EXTRACTED_FILES"
              echo "   - Total extracted size: $EXTRACTED_SIZE bytes"
              
              if [ "$EXTRACTED_FILES" -gt 0 ] && [ "$EXTRACTED_SIZE" -gt 1000000 ]; then
                echo "‚úÖ Extraction verification passed"
                
                # Look for actual Fortify rule files
                echo "üîç Searching for Fortify rule files in extracted contents..."
                RULE_FILES=$(find "$RULES_DIR" -type f \( -name "*.bin" -o -name "*.jar" \) 2>/dev/null)
                
                if [ -n "$RULE_FILES" ]; then
                  echo "‚úÖ Found Fortify rule files:"
                  echo "$RULE_FILES" | head -5 | while read -r file; do
                    SIZE=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
                    echo "   - $file (size: $SIZE bytes)"
                  done
                  
                  # Count and size the actual rule files
                  for file in $RULE_FILES; do
                    if [ -s "$file" ]; then
                      RULES_COUNT=$((RULES_COUNT + 1))
                      RULES_SIZE=$((RULES_SIZE + $(stat -c%s "$file" 2>/dev/null || echo 0)))
                    fi
                  done
                  
                  # Create a Fortify-compatible rules structure
                  echo ""
                  echo "üîß Creating Fortify-compatible rules structure..."
                  echo "   - Source: ScanCentral Controller extracted contents"
                  echo "   - Target: Rules directly accessible for Fortify"
                  
                  # Create a Fortify-compatible rules directory
                  FORTIFY_RULES_DIR="$RULES_DIR/fortify-rules"
                  mkdir -p "$FORTIFY_RULES_DIR"
                  
                  # Copy all rule files to the main rules directory for Fortify access
                  echo "üìÅ Copying rules to Fortify-compatible location..."
                  find "$RULES_DIR" -type f \( -name "*.bin" -o -name "*.jar" \) -exec cp {} "$FORTIFY_RULES_DIR/" \;
                  
                  # Verify the reorganization
                  REORGANIZED_COUNT=$(find "$FORTIFY_RULES_DIR" -type f 2>/dev/null | wc -l)
                  echo "‚úÖ Reorganization complete: $REORGANIZED_COUNT rules in Fortify-compatible location"
                  
                  # Update the rules directory to use the reorganized structure
                  RULES_DIR="$FORTIFY_RULES_DIR"
                  
                  echo "‚úÖ Successfully extracted and reorganized $RULES_COUNT Fortify rule files"
                  echo "   - Total rules size: $RULES_SIZE bytes"
                  echo "   - Fortify-compatible location: $RULES_DIR"
                else
                  echo "‚ö†Ô∏è  No rule files found in extracted contents"
                fi
              else
                echo "‚ùå Extraction verification failed"
                SCANCENTRAL_EXTRACTED="false"
              fi
            else
              echo "‚ùå ScanCentral Controller extraction failed"
              SCANCENTRAL_EXTRACTED="false"
            fi
          fi
          
          # Clean up temporary files
          echo ""
          echo "üßπ Cleaning up temporary files..."
          rm -rf $TEMP_DIR
          
          # Final verification and setup
          echo "üîç Verifying final rules directory..."
          ls -la $RULES_DIR/
          
          # Set environment variables
          echo "FORTIFY_GUARANTEED_RULES_PATH=$RULES_DIR" >> $GITHUB_ENV
          echo "GUARANTEED_RULES_COUNT=$RULES_COUNT" >> $GITHUB_ENV
          echo "GUARANTEED_RULES_SIZE=$RULES_SIZE" >> $GITHUB_ENV
          echo "SCANCENTRAL_DOWNLOADED=$SCANCENTRAL_DOWNLOADED" >> $GITHUB_ENV
          echo "SCANCENTRAL_EXTRACTED=$SCANCENTRAL_EXTRACTED" >> $GITHUB_ENV
          
          echo "‚úÖ Fortify rules extraction completed"
          
      - name: Run Fortify Source Code Scan
        run: |
          echo "=== Running Fortify Source Code Scan ==="
          
          # Set PATH for this step
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          
          # Verify PATH and commands are accessible
          echo "üîç Current PATH: $PATH"
          echo "üîç Verifying commands are accessible:"
          which sourceanalyzer && which ReportGenerator
          
          # Clean previous scan artifacts
          echo "üßπ Cleaning previous scan artifacts..."
          sourceanalyzer -b fortify-scan -clean || echo "No previous build to clean"
          
          echo "üîç Starting source code analysis..."
          echo "   - Scan directory: ${{ inputs.scan_directory }}"
          echo "   - Rules path: ${{ env.FORTIFY_GUARANTEED_RULES_PATH }}"
          
          # Run the scan with extracted rules
          if sourceanalyzer -b fortify-scan -rules "${{ env.FORTIFY_GUARANTEED_RULES_PATH }}" "${{ inputs.scan_directory }}"; then
            echo "‚úÖ Source code analysis completed successfully"
            
            echo "üìä Generating FPR report..."
            if sourceanalyzer -b fortify-scan -scan -f fortify-scan.fpr; then
              echo "‚úÖ FPR report generated successfully: fortify-scan.fpr"
              
              # Generate HTML report
              echo "üìÑ Generating HTML report..."
              if ReportGenerator -format html -f fortify-scan.html -source fortify-scan.fpr; then
                echo "‚úÖ HTML report generated successfully: fortify-scan.html"
              else
                echo "‚ö†Ô∏è  HTML report generation failed, but FPR is available"
              fi
            else
              echo "‚ùå FPR report generation failed"
              exit 1
            fi
          else
            echo "‚ùå Source code analysis failed"
            exit 1
          fi
          
      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: fortify-scan-results
          path: |
            fortify-scan.fpr
            fortify-scan.html
          retention-days: 30
          
      - name: Final Workflow Summary
        run: |
          echo "=== Final Workflow Summary ==="
          
          # Ensure PATH is available for final verification
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          
          echo "‚úÖ Fortify Security Scan completed successfully!"
          echo ""
          echo "üìä Results:"
          echo "   - FPR Report: fortify-scan.fpr"
          echo "   - HTML Report: fortify-scan.html"
          echo "   - Scan Directory: ${{ inputs.scan_directory }}"
          echo ""
          echo "üîß Configuration:"
          echo "   - Fortify Version: ${{ inputs.fortify_version }}"
          echo "   - S3 Bucket: ${{ inputs.s3_bucket }}"
          echo "   - ScanCentral Controller Downloaded: ${{ env.SCANCENTRAL_DOWNLOADED }}"
          echo "   - ScanCentral Controller Extracted: ${{ env.SCANCENTRAL_EXTRACTED }}"
          echo "   - Guaranteed Rules Path: ${{ env.FORTIFY_GUARANTEED_RULES_PATH }}"
          echo "   - Guaranteed Rules Count: ${{ env.GUARANTEED_RULES_COUNT }}"
          echo "   - Guaranteed Rules Size: ${{ env.GUARANTEED_RULES_SIZE }}"
          echo ""
          echo "üîç Final PATH Verification:"
          echo "   - Current PATH: $PATH"
          echo "   - sourceanalyzer: $(which sourceanalyzer)"
          echo "   - ReportGenerator: $(which ReportGenerator)"
          echo ""
          echo "üéØ Next Steps:"
          echo "   - Download artifacts from GitHub Actions"
          echo "   - Review FPR file in Fortify SSC or Fortify Viewer"
          echo "   - Analyze HTML report for detailed findings"
