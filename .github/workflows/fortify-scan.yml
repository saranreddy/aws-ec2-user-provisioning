name: Fortify Security Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        type: choice
        options:
          - source-code
          - dependency-check
          - full-scan
        default: 'source-code'
      fortify_version:
        description: 'Fortify version to use'
        required: true
        default: '24.2.0'
        type: string
      s3_bucket:
        description: 'S3 bucket containing Fortify installation files'
        required: true
        default: 'aws-ec2-user-provisioning-security-files'
        type: string
      aws_account_id:
        description: 'AWS Account ID'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1

env:
  FORTIFY_VERSION: "24.2.0"
  FORTIFY_HOME: "/opt/fortify"
  FORTIFY_SCA_HOME: "/opt/fortify/fortify-sca"
  PATH: "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"

jobs:
  fortify-scan:
    name: Fortify Security Scan
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup System Environment
        run: |
          echo "=== Setting up System Environment ==="
          
          # Set PATH to include all system binaries
          echo "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
          
          # Verify basic commands are available
          echo "üîç Verifying basic system commands:"
          which cp || echo "‚ùå cp not found"
          which mv || echo "‚ùå mv not found"
          which rm || echo "‚ùå rm not found"
          which mkdir || echo "‚ùå mkdir not found"
          which ls || echo "‚ùå ls not found"
          which head || echo "‚ùå head not found"
          which find || echo "‚ùå find not found"
          which grep || echo "‚ùå grep not found"
          
          echo "‚úÖ System environment setup completed"
          
      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "‚ùå Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}
          
      - name: Verify AWS Credentials
        run: |
          echo "=== AWS Credentials Verification ==="
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"
          
      - name: Verify System Environment
        run: |
          echo "=== System Environment Verification ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
          
          echo "üîç Current PATH: $PATH"
          echo "üîç Current working directory: $(pwd)"
          echo "üîç User: $(whoami)"
          echo "üîç Home directory: $HOME"
          
          # Test critical commands
          echo "üß™ Testing critical commands:"
          cp --version || echo "‚ùå cp command failed"
          mv --version || echo "‚ùå mv command failed"
          rm --version || echo "‚ùå rm command failed"
          mkdir --version || echo "‚ùå mkdir command failed"
          ls --version || echo "‚ùå ls command failed"
          find --version || echo "‚ùå find command failed"
          java -version || echo "‚ùå java command failed"
          
          echo "‚úÖ System environment verified"
          
      - name: Install System Dependencies
        run: |
          echo "=== Installing System Dependencies ==="
          
          # Update package lists first
          sudo apt-get update
          
          # Install Java and essential system utilities
          sudo apt-get install -y \
            default-jdk \
            unzip \
            coreutils \
            findutils \
            grep \
            sed \
            bash \
            cpio \
            tar \
            gzip \
            wget \
            curl \
            build-essential \
            pkg-config \
            file \
            procps \
            util-linux \
            coreutils \
            findutils \
            grep \
            sed \
            gawk \
            less \
            vim-tiny
          
          # Verify critical commands are available
          echo "üîç Verifying critical commands are available:"
          which cp || echo "‚ùå cp not found"
          which mv || echo "‚ùå mv not found"
          which rm || echo "‚ùå rm not found"
          which mkdir || echo "‚ùå mkdir not found"
          which ls || echo "‚ùå ls not found"
          which find || echo "‚ùå find not found"
          which java || echo "‚ùå java not found"
          
          # Set PATH to ensure system binaries are accessible
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
          echo "PATH set to: $PATH"
          
          echo "‚úÖ System dependencies installed"
          
          # Export PATH to GitHub environment for all subsequent steps
          echo "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
          echo "‚úÖ PATH exported to GitHub environment"
          
          # Create symlinks to ensure commands are accessible
          echo "üîß Creating symlinks for critical commands..."
          sudo ln -sf /bin/cp /usr/bin/cp 2>/dev/null || echo "cp symlink already exists"
          sudo ln -sf /bin/mv /usr/bin/mv 2>/dev/null || echo "mv symlink already exists"
          sudo ln -sf /bin/rm /usr/bin/rm 2>/dev/null || echo "rm symlink already exists"
          sudo ln -sf /bin/mkdir /usr/bin/mkdir 2>/dev/null || echo "mkdir symlink already exists"
          sudo ln -sf /bin/ls /usr/bin/ls 2>/dev/null || echo "ls symlink already exists"
          
          echo "‚úÖ System configuration completed"
          
      - name: Download Default Fortify Rules
        run: |
          echo "=== Downloading Default Fortify Rules ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          # Create rules directory if it doesn't exist
          sudo mkdir -p /opt/fortify/default-rules
          
          # Download default Fortify rules from S3 if available
          S3_BUCKET="${{ inputs.s3_bucket }}"
          FORTIFY_VERSION="${{ inputs.fortify_version }}"
          
          echo "üîç Checking for default rules in S3..."
          if aws s3 ls "s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/rules/" >/dev/null 2>&1; then
            echo "üì• Downloading default rules from S3..."
            aws s3 cp "s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/rules/" /opt/fortify/default-rules/ --recursive
            echo "‚úÖ Default rules downloaded from S3"
          else
            echo "‚ö†Ô∏è  No default rules found in S3, will use Fortify built-in rules"
          fi
          
          # Set default rules path
          echo "FORTIFY_DEFAULT_RULES_PATH=/opt/fortify/default-rules" >> $GITHUB_ENV
          
      - name: Create Fortify Installation Directory
        run: |
          echo "=== Creating Fortify Installation Directory ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"
          
          sudo mkdir -p ${{ env.FORTIFY_HOME }}
          sudo chown $USER:$USER ${{ env.FORTIFY_HOME }}
          chmod 755 ${{ env.FORTIFY_HOME }}
          
          echo "‚úÖ Fortify directory created: ${{ env.FORTIFY_HOME }}"
          
      - name: Download Fortify Installation Files from S3
        run: |
          echo "=== Downloading Fortify Files from S3 ==="
          
          S3_BUCKET="${{ inputs.s3_bucket }}"
          FORTIFY_VERSION="${{ inputs.fortify_version }}"
          
          echo "Downloading from S3 bucket: $S3_BUCKET"
          echo "Fortify version: $FORTIFY_VERSION"
          
          # Download Fortify SCA installer (contains sourceanalyzer)
          echo "üì• Downloading Fortify SCA installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_SCA_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download Fortify Apps and Tools installer (contains reporting tools)
          echo "üì• Downloading Fortify Apps and Tools installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_Apps_and_Tools_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download license file
          echo "üì• Downloading Fortify license..."
          aws s3 cp "s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/fortify-license" ${{ env.FORTIFY_HOME }}/fortify.license
          
          # Make installer executable
          chmod +x ${{ env.FORTIFY_HOME }}/*.run
          
          echo "‚úÖ All Fortify files downloaded from S3"
          ls -la ${{ env.FORTIFY_HOME }}/
          
      - name: Check Fortify Installer Options
        run: |
          echo "=== Checking Fortify Installer Options ==="
          
          cd ${{ env.FORTIFY_HOME }}
          
          echo "üîç Checking available installer options..."
          ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --help || echo "Installer help not available, trying basic installation"
          
      - name: Install Fortify SCA
        run: |
          echo "=== Installing Fortify SCA ==="
          
          cd ${{ env.FORTIFY_HOME }}
          
          # Install Fortify SCA first (contains sourceanalyzer)
          echo "üîß Installing Fortify SCA (contains sourceanalyzer)..."
          
          # Method 1: Try with installdir
          if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_SCA_HOME }}; then
            echo "‚úÖ Fortify SCA installed successfully with installdir"
          else
            echo "‚ö†Ô∏è  installdir failed, trying without directory specification..."
            # Method 2: Try without directory specification (install to default location)
            if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended; then
              echo "‚úÖ Fortify SCA installed successfully to default location"
              # Update the SCA home to default location
              echo "FORTIFY_SCA_HOME=/opt/fortify/fortify-sca" >> $GITHUB_ENV
            else
              echo "‚ùå Fortify SCA installation failed"
              exit 1
            fi
          fi
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Fortify SCA installed successfully"
          else
            echo "‚ùå Fortify SCA installation failed"
            exit 1
          fi
          
          # Set environment variables
          echo "FORTIFY_SCA_HOME=${{ env.FORTIFY_SCA_HOME }}" >> $GITHUB_ENV
          echo "PATH=\$PATH:\$FORTIFY_SCA_HOME/bin" >> $GITHUB_ENV
          
          echo ""
          echo "üîß Installing Fortify Apps and Tools (contains reporting tools)..."
          
          # Install Fortify Apps and Tools to the same directory
          if ./Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_SCA_HOME }}; then
            echo "‚úÖ Fortify Apps and Tools installed successfully"
          else
            echo "‚ö†Ô∏è  Apps and Tools installation failed, but continuing with SCA..."
            echo "Note: Reporting tools may not be available"
          fi
          
          # Find where Fortify was actually installed
          echo "üîç Locating Fortify installation..."
          
          # Debug: Show what directories were created
          echo "üìÅ Debug: Checking what was created in /opt/fortify:"
          ls -la /opt/fortify/ || echo "No /opt/fortify directory found"
          
          echo ""
          echo "üìÅ Debug: Checking what was created in FORTIFY_HOME (${{ env.FORTIFY_HOME }}):"
          ls -la ${{ env.FORTIFY_HOME }}/ || echo "No files in FORTIFY_HOME"
          
          echo ""
          echo "üîç Debug: Searching for sourceanalyzer in entire /opt directory:"
          find /opt -name "sourceanalyzer" 2>/dev/null | head -5 || echo "No sourceanalyzer found in /opt"
          
          echo ""
          echo "üîç Debug: Searching for any Fortify-related executables:"
          find /opt -name "*fortify*" -o -name "*sourceanalyzer*" -o -name "*ReportGenerator*" 2>/dev/null | head -10 || echo "No Fortify executables found"
          
          # Try to find sourceanalyzer and set PATH
          echo ""
          echo "üîç Debug: Attempting to locate sourceanalyzer..."
          SOURCEANALYZER_PATH=$(find /opt -name "sourceanalyzer" 2>/dev/null | head -1)
          
          if [ -n "$SOURCEANALYZER_PATH" ]; then
            echo "‚úÖ Found sourceanalyzer at: $SOURCEANALYZER_PATH"
            ACTUAL_SCA_HOME=$(dirname $(dirname "$SOURCEANALYZER_PATH"))
            echo "‚úÖ Actual SCA home: $ACTUAL_SCA_HOME"
            echo "FORTIFY_SCA_HOME=$ACTUAL_SCA_HOME" >> $GITHUB_ENV
            echo "PATH=\$PATH:\$ACTUAL_SCA_HOME/bin" >> $GITHUB_ENV
            echo "‚úÖ Updated FORTIFY_SCA_HOME to: $ACTUAL_SCA_HOME"
          else
            echo "‚ùå sourceanalyzer not found anywhere in /opt"
            echo "üîç Debug: Let's check what the installer actually created:"
            echo "--- Contents of /opt/fortify (if exists): ---"
            ls -la /opt/fortify/ 2>/dev/null || echo "Directory not found"
            echo "--- Contents of FORTIFY_HOME: ---"
            ls -la ${{ env.FORTIFY_HOME }}/ 2>/dev/null || echo "Directory not found"
          fi
          
      - name: Configure Fortify License
        run: |
          echo "=== Configuring Fortify License ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          # Verify critical commands are available before proceeding
          echo "üîç Verifying commands before license configuration:"
          which cp || echo "‚ùå cp not found in PATH: $PATH"
          which mv || echo "‚ùå mv not found in PATH: $PATH"
          which mkdir || echo "‚ùå mkdir not found in PATH: $PATH"
          
          # Copy license to multiple possible Fortify locations
          echo "üìã Copying license to multiple Fortify locations..."
          
          # Location 1: SCA bin directory
          cp ${{ env.FORTIFY_HOME }}/fortify.license ${{ env.FORTIFY_SCA_HOME }}/bin/
          
          # Location 2: SCA root directory
          cp ${{ env.FORTIFY_HOME }}/fortify.license ${{ env.FORTIFY_SCA_HOME }}/
          
          # Location 3: System-wide Fortify location (avoid self-copying)
          if [ "${{ env.FORTIFY_HOME }}" != "/opt/fortify" ]; then
            sudo cp ${{ env.FORTIFY_HOME }}/fortify.license /opt/fortify/
          else
            echo "‚ö†Ô∏è  Skipping system-wide copy (same location)"
          fi
          
          # Location 4: User home directory (Fortify sometimes looks here)
          cp ${{ env.FORTIFY_HOME }}/fortify.license ~/
          
          # Set multiple license path environment variables
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          export FORTIFY_LICENSE="${{ env.FORTIFY_SCA_HOME }}/fortify.license"
          export FORTIFY_LICENSE_FILE="${{ env.FORTIFY_SCA_HOME }}/fortify.license"
          
          echo "FORTIFY_LICENSE_PATH=$FORTIFY_LICENSE_PATH" >> $GITHUB_ENV
          echo "FORTIFY_LICENSE=$FORTIFY_LICENSE" >> $GITHUB_ENV
          echo "FORTIFY_LICENSE_FILE=$FORTIFY_LICENSE_FILE" >> $GITHUB_ENV
          
          # Verify license file exists and show its properties
          echo "üîç License file details:"
          ls -la ${{ env.FORTIFY_HOME }}/fortify.license
          echo "üìÑ License file content (first 5 lines):"
          head -5 ${{ env.FORTIFY_HOME }}/fortify.license || echo "Could not read license file"
          
          echo "‚úÖ Fortify license configured in multiple locations"
          
          echo ""
          echo "üîç License file analysis:"
          echo "File: ${{ env.FORTIFY_HOME }}/fortify.license"
          echo "Size: $(ls -lh ${{ env.FORTIFY_HOME }}/fortify.license | awk '{print $5}')"
          echo "Type: $(file ${{ env.FORTIFY_HOME }}/fortify.license)"
          echo "Permissions: $(ls -la ${{ env.FORTIFY_HOME }}/fortify.license | awk '{print $1, $3, $4}')"
          
      - name: Verify Fortify Installation
        run: |
          echo "=== Verifying Fortify Installation ==="
          
          # Debug: Show current environment
          echo "üîç Debug: Current FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }}"
          echo "üîç Debug: Current PATH: $PATH"
          
          # Add Fortify to PATH for this session
          export PATH="$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          echo "üîç Debug: Updated PATH: $PATH"
          
          # Debug: Check if sourceanalyzer exists in the expected location
          echo "üîç Debug: Checking if sourceanalyzer exists in ${{ env.FORTIFY_SCA_HOME }}/bin:"
          ls -la "${{ env.FORTIFY_SCA_HOME }}/bin/" 2>/dev/null || echo "Directory not found or empty"
          
          # Debug: Search for sourceanalyzer in entire Fortify installation
          echo ""
          echo "üîç Debug: Searching for sourceanalyzer in entire Fortify installation tree:"
          find /opt/fortify -name "sourceanalyzer" 2>/dev/null | head -5 || echo "sourceanalyzer not found in /opt/fortify"
          
          echo ""
          echo "üîç Debug: Searching for any SCA-related executables:"
          find /opt/fortify -name "*sca*" -o -name "*source*" -o -name "*analyzer*" 2>/dev/null | head -10 || echo "No SCA executables found"
          
          # Debug: Try to find sourceanalyzer again
          echo ""
          echo "üîç Debug: Searching for sourceanalyzer in PATH:"
          which sourceanalyzer || echo "sourceanalyzer not found in PATH"
          
          # Test Fortify SCA
          echo "üß™ Testing Fortify SCA..."
          if sourceanalyzer -version; then
            echo "‚úÖ Fortify SCA is working"
          else
            echo "‚ùå Fortify SCA test failed"
            echo "üîç Debug: Let's check what went wrong..."
            echo "--- Final PATH: $PATH ---"
            echo "--- Final FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }} ---"
            exit 1
          fi
          
          echo "‚úÖ Fortify SCA verified successfully"
          
      - name: Configure Fortify Rules and Environment
        if: inputs.scan_type == 'source-code'
        run: |
          echo "=== Configuring Fortify Rules and Environment ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          
          # Verify critical commands are available
          echo "üîç Verifying commands before rules configuration:"
          which head || echo "‚ùå head not found in PATH: $PATH"
          which ls || echo "‚ùå ls not found in PATH: $PATH"
          which find || echo "‚ùå find not found in PATH: $PATH"
          which grep || echo "‚ùå grep not found in PATH: $PATH"
          
          echo "üîç Locating Fortify rules files..."
          
          # Find rules files in various locations
          echo "--- Searching for rules files ---"
          find /opt/fortify -name "*.bin" -o -name "*rules*" -o -name "*core*" 2>/dev/null | head -10 || echo "No rules files found in /opt/fortify"
          
          # Look for specific Fortify rules directories
          echo ""
          echo "--- Checking common rules locations ---"
          for dir in "${{ env.FORTIFY_SCA_HOME }}/Core" "${{ env.FORTIFY_SCA_HOME }}/core" "${{ env.FORTIFY_SCA_HOME }}/Rules" "${{ env.FORTIFY_SCA_HOME }}/rules"; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Found rules directory: $dir"
              ls -la "$dir" | head -5
            else
              echo "‚ùå Not found: $dir"
            fi
          done
          
          # Set rules path environment variable
          echo ""
          echo "üîß Setting rules path..."
          if [ -d "${{ env.FORTIFY_SCA_HOME }}/Core" ]; then
            FORTIFY_RULES_PATH="${{ env.FORTIFY_SCA_HOME }}/Core"
            echo "FORTIFY_RULES_PATH=$FORTIFY_RULES_PATH" >> $GITHUB_ENV
            echo "‚úÖ Rules path set to: $FORTIFY_RULES_PATH"
            
            # Debug: Show what's in the Core directory
            echo "üîç Debug: Contents of Core directory:"
            ls -la "${{ env.FORTIFY_SCA_HOME }}/Core/" | head -10
            
                      # Debug: Check for specific rules files
          echo "üîç Debug: Looking for rules files in Core:"
          find "${{ env.FORTIFY_SCA_HOME }}/Core" -name "*.bin" -o -name "*scan-policy*" -o -name "*rules*" 2>/dev/null | head -10 || echo "No specific rules files found"
          
          # Check if Core directory is empty
          if [ -z "$(ls -A "${{ env.FORTIFY_SCA_HOME }}/Core" 2>/dev/null)" ]; then
            echo "‚ö†Ô∏è  Core directory is empty - this suggests incomplete Fortify installation"
            echo "üîç Let's search for rules files in the entire Fortify installation tree:"
            find /opt/fortify -name "*.bin" -o -name "*scan-policy*" -o -name "*rules*" -o -name "*Core*" 2>/dev/null | head -20 || echo "No rules files found anywhere in /opt/fortify"
          fi
            
          elif [ -d "${{ env.FORTIFY_SCA_HOME }}/core" ]; then
            FORTIFY_RULES_PATH="${{ env.FORTIFY_SCA_HOME }}/core"
            echo "FORTIFY_RULES_PATH=$FORTIFY_RULES_PATH" >> $GITHUB_ENV
            echo "‚úÖ Rules path set to: $FORTIFY_RULES_PATH"
          else
            echo "‚ö†Ô∏è  No rules directory found, will use default"
          fi
          
          # Show Fortify environment
          echo ""
          echo "üîç Fortify environment variables:"
          env | grep -i fortify || echo "No Fortify environment variables found"
          
          # Verify rules path is set
          echo ""
          echo "üîç Verifying FORTIFY_RULES_PATH is set:"
          if [ -n "$FORTIFY_RULES_PATH" ]; then
            echo "‚úÖ FORTIFY_RULES_PATH is set to: $FORTIFY_RULES_PATH"
            echo "‚úÖ Rules directory exists: $([ -d "$FORTIFY_RULES_PATH" ] && echo "YES" || echo "NO")"
            
            # Check if rules directory actually contains rules files
            RULES_COUNT=$(find "$FORTIFY_RULES_PATH" -name "*.bin" -o -name "*scan-policy*" -o -name "*rules*" 2>/dev/null | wc -l)
            if [ "$RULES_COUNT" -gt 0 ]; then
              echo "‚úÖ Rules directory contains $RULES_COUNT rules files"
            else
              echo "‚ö†Ô∏è  Rules directory exists but contains no rules files - will use default Fortify rules"
              echo "FORTIFY_RULES_PATH=" >> $GITHUB_ENV
              unset FORTIFY_RULES_PATH
            fi
          else
            echo "‚ö†Ô∏è  FORTIFY_RULES_PATH is not set - will use default Fortify rules"
          fi
          
      - name: Debug Fortify License Issues
        if: inputs.scan_type == 'source-code'
        run: |
          echo "=== Debugging Fortify License Issues ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          
          # Verify critical commands are available
          echo "üîç Verifying commands before license debugging:"
          which ls || echo "‚ùå ls not found in PATH: $PATH"
          which find || echo "‚ùå find not found in PATH: $PATH"
          which grep || echo "‚ùå grep not found in PATH: $PATH"
          
          echo "üîç Current working directory: $(pwd)"
          echo "üîç FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }}"
          echo "üîç FORTIFY_HOME: ${{ env.FORTIFY_HOME }}"
          
          echo ""
          echo "üìÅ License files in various locations:"
          echo "--- /opt/fortify/ ---"
          find /opt/fortify -name "*license*" -o -name "*lic*" -o -name "*ot-package*" 2>/dev/null || echo "No files found"
          
          echo ""
          echo "--- SCA bin directory ---"
          ls -la ${{ env.FORTIFY_SCA_HOME }}/bin/*license* ${{ env.FORTIFY_SCA_HOME }}/bin/*lic* 2>/dev/null || echo "No files found"
          
          echo ""
          echo "--- SCA root directory ---"
          ls -la ${{ env.FORTIFY_SCA_HOME }}/*license* ${{ env.FORTIFY_SCA_HOME }}/*lic* 2>/dev/null || echo "No files found"
          
          echo ""
          echo "--- User home ---"
          ls -la ~/*license* ~/*lic* ~/*ot-package* 2>/dev/null || echo "No files found"
          
          echo ""
          echo "üîç Environment variables:"
          env | grep -i fortify || echo "No Fortify environment variables found"
          
          echo ""
          echo "üß™ Testing Fortify license commands:"
          echo "--- License check ---"
          sourceanalyzer -license-check 2>&1 || echo "License check failed"
          
          echo ""
          echo "--- License info ---"
          sourceanalyzer -license-info 2>&1 || echo "License info failed"
          
          echo ""
          echo "--- Version with license ---"
          sourceanalyzer -version 2>&1 || echo "Version check failed"
          
          echo ""
          echo "üìÑ License file content analysis:"
          if [ -f "${{ env.FORTIFY_HOME }}/fortify.license" ]; then
            echo "File exists: ${{ env.FORTIFY_HOME }}/fortify.license"
            echo "File size: $(ls -lh ${{ env.FORTIFY_HOME }}/fortify.license | awk '{print $5}')"
            echo "File type: $(file ${{ env.FORTIFY_HOME }}/fortify.license)"
            echo "First 10 lines:"
            head -10 ${{ env.FORTIFY_HOME }}/fortify.license || echo "Could not read file"
          else
            echo "‚ùå License file not found at ${{ env.FORTIFY_HOME }}/fortify.license"
          fi
          
          echo ""
          echo "üîç Searching for any Fortify license files:"
          find /opt -name "*fortify*" -o -name "*license*" -o -name "*lic*" 2>/dev/null | head -20
          
      - name: Run Fortify Source Code Scan
        if: inputs.scan_type == 'source-code'
        run: |
          echo "=== Running Fortify Source Code Scan ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          # Debug: Show environment before scan
          echo "üîç Debug: Environment before scan:"
          echo "FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }}"
          echo "FORTIFY_RULES_PATH: ${{ env.FORTIFY_RULES_PATH }}"
          echo "PATH: $PATH"
          
          echo "üîç Starting source code analysis..."
          
          # Run Fortify SCA scan
          cd $GITHUB_WORKSPACE
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-scan -clean
          
          # Build and scan the project
          echo "üîç Debug: Using rules path: ${{ env.FORTIFY_RULES_PATH }}"
          echo "üîç Debug: Rules path exists: $([ -d "${{ env.FORTIFY_SCA_HOME }}/Core" ] && echo "YES" || echo "NO")"
          
          if [ -n "${{ env.FORTIFY_RULES_PATH }}" ] && [ -d "${{ env.FORTIFY_RULES_PATH }}" ]; then
            echo "üîß Using custom rules path: ${{ env.FORTIFY_RULES_PATH }}"
            sourceanalyzer -b fortify-scan \
              -source 1.8 \
              -cp "**/*.jar" \
              -cp "**/*.class" \
              -cp "**/*.py" \
              -cp "**/*.js" \
              -cp "**/*.ts" \
              -cp "**/*.tf" \
              -cp "**/*.yml" \
              -cp "**/*.yaml" \
              -cp "**/*.sh" \
              -cp "**/*.py" \
              -rules "${{ env.FORTIFY_RULES_PATH }}" \
              .
          elif [ -n "${{ env.FORTIFY_DEFAULT_RULES_PATH }}" ] && [ -d "${{ env.FORTIFY_DEFAULT_RULES_PATH }}" ]; then
            echo "üîß Using downloaded default rules path: ${{ env.FORTIFY_DEFAULT_RULES_PATH }}"
            sourceanalyzer -b fortify-scan \
              -source 1.8 \
              -cp "**/*.jar" \
              -cp "**/*.class" \
              -cp "**/*.py" \
              -cp "**/*.js" \
              -cp "**/*.ts" \
              -cp "**/*.tf" \
              -cp "**/*.yml" \
              -cp "**/*.yaml" \
              -cp "**/*.sh" \
              -cp "**/*.py" \
              -rules "${{ env.FORTIFY_DEFAULT_RULES_PATH }}" \
              .
          else
            echo "üîß No custom or default rules available, using Fortify built-in rules"
            sourceanalyzer -b fortify-scan \
              -source 1.8 \
              -cp "**/*.jar" \
              -cp "**/*.class" \
              -cp "**/*.py" \
              -cp "**/*.js" \
              -cp "**/*.ts" \
              -cp "**/*.tf" \
              -cp "**/*.yml" \
              -cp "**/*.yaml" \
              -cp "**/*.sh" \
              -cp "**/*.py" \
              .
          fi
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Source code analysis completed successfully"
          else
            echo "‚ùå Source code analysis failed"
            exit 1
          fi
          
          # Generate FPR report
          echo "üìä Generating FPR report..."
          sourceanalyzer -b fortify-scan -scan -f $SCAN_DIR/fortify-scan.fpr
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ FPR report generated: $SCAN_DIR/fortify-scan.fpr"
          else
            echo "‚ùå FPR report generation failed"
            exit 1
          fi
          
          # Generate HTML report
          echo "üìä Generating HTML report..."
          ReportGenerator -f $SCAN_DIR/fortify-scan.html -source $SCAN_DIR/fortify-scan.fpr
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ HTML report generated: $SCAN_DIR/fortify-scan.html"
          else
            echo "‚ùå HTML report generation failed"
            exit 1
          fi
          
          echo "‚úÖ Source code scan completed successfully"
          
      - name: Run Fortify Dependency Check
        if: inputs.scan_type == 'dependency-check'
        run: |
          echo "=== Running Fortify Dependency Check ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          echo "üîç Starting dependency analysis..."
          
          # Run dependency check using Fortify
          cd $GITHUB_WORKSPACE
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-deps -clean
          
          # Scan for dependencies
          sourceanalyzer -b fortify-deps \
            -cp "**/*.jar" \
            -cp "**/*.class" \
            -cp "**/*.py" \
            -cp "**/*.js" \
            -cp "**/*.ts" \
            -cp "**/*.tf" \
            -cp "**/*.yml" \
            -cp "**/*.yaml" \
            -cp "**/*.sh" \
            -cp "**/*.py" \
            .
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Dependency analysis completed successfully"
          else
            echo "‚ùå Dependency analysis failed"
            exit 1
          fi
          
          # Generate FPR report
          echo "üìä Generating FPR report..."
          sourceanalyzer -b fortify-deps -scan -f $SCAN_DIR/fortify-deps.fpr
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ FPR report generated: $SCAN_DIR/fortify-deps.fpr"
          else
            echo "‚ùå FPR report generation failed"
            exit 1
          fi
          
          echo "‚úÖ Dependency check completed successfully"
          
      - name: Run Full Fortify Scan
        if: inputs.scan_type == 'full-scan'
        run: |
          echo "=== Running Full Fortify Scan ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          echo "üîç Starting comprehensive analysis..."
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-full -clean
          
          # Run comprehensive scan
          sourceanalyzer -b fortify-full \
            -source 1.8 \
            -cp "**/*.jar" \
            -cp "**/*.class" \
            -cp "**/*.py" \
            -cp "**/*.js" \
            -cp "**/*.ts" \
            -cp "**/*.tf" \
            -cp "**/*.yml" \
            -cp "**/*.yaml" \
            -cp "**/*.sh" \
            -cp "**/*.py" \
            -Dcom.fortify.sca.Phase0HigherOrder.Lower=false \
            -Dcom.fortify.sca.EnableAWB=true \
            -Dcom.fortify.sca.EnableReportGeneration=true \
            .
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Comprehensive analysis completed successfully"
          else
            echo "‚ùå Comprehensive analysis failed"
            exit 1
          fi
          
          # Generate FPR report
          echo "üìä Generating FPR report..."
          sourceanalyzer -b fortify-full -scan -f $SCAN_DIR/fortify-full.fpr
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ FPR report generated: $SCAN_DIR/fortify-full.fpr"
          else
            echo "‚ùå FPR report generation failed"
            exit 1
          fi
          
          # Generate HTML report
          echo "üìä Generating HTML report..."
          ReportGenerator -f $SCAN_DIR/fortify-full.html -source $SCAN_DIR/fortify-full.fpr
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ HTML report generated: $SCAN_DIR/fortify-full.html"
          else
            echo "‚ùå HTML report generation failed"
            exit 1
          fi
          
          echo "‚úÖ Full scan completed successfully"
          
      - name: Upload Scan Results to S3
        run: |
          echo "=== Uploading Scan Results to S3 ==="
          
          S3_BUCKET="${{ inputs.s3_bucket }}"
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          # Create results directory in S3
          S3_RESULTS_PATH="scan-results/$TIMESTAMP"
          
          echo "üì§ Uploading scan results to S3..."
          echo "S3 Path: s3://$S3_BUCKET/$S3_RESULTS_PATH"
          
          # Upload all scan results
          aws s3 cp $SCAN_DIR s3://$S3_BUCKET/$S3_RESULTS_PATH --recursive
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Scan results uploaded to S3 successfully"
            echo "S3 Location: s3://$S3_BUCKET/$S3_RESULTS_PATH"
          else
            echo "‚ùå Failed to upload scan results to S3"
            exit 1
          fi
          
      - name: Generate Scan Summary
        run: |
          echo "=== Fortify Scan Summary ==="
          
          SCAN_TYPE="${{ inputs.scan_type }}"
          FORTIFY_VERSION="${{ inputs.fortify_version }}"
          S3_BUCKET="${{ inputs.s3_bucket }}"
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          
          echo "üéØ Scan Configuration:"
          echo "- Scan Type: $SCAN_TYPE"
          echo "- Fortify Version: $FORTIFY_VERSION"
          echo "- S3 Bucket: $S3_BUCKET"
          echo "- Timestamp: $TIMESTAMP"
          echo ""
          
          echo "üìä Generated Reports:"
          ls -la $SCAN_DIR/
          echo ""
          
          echo "üîç Scan Results:"
          echo "- FPR Files: Available for Fortify SSC import"
          echo "- HTML Reports: Human-readable vulnerability reports"
          echo "- S3 Location: s3://$S3_BUCKET/scan-results/$TIMESTAMP"
          echo ""
          
          echo "‚úÖ Fortify scan completed successfully!"
          echo "üìã Next Steps:"
          echo "1. Review HTML reports in S3"
          echo "2. Import FPR files to Fortify SSC for detailed analysis"
          echo "3. Address critical and high severity vulnerabilities"
          echo "4. Re-run scan after fixes to verify remediation"
