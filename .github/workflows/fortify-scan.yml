
name: Fortify Security Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        type: choice
        options:
          - source-code
          - dependency-check
          - full-scan
        default: 'source-code'
      fortify_version:
        description: 'Fortify version to use'
        required: true
        default: '24.2.0'
        type: string
      s3_bucket:
        description: 'S3 bucket containing Fortify installation files'
        required: true
        default: 'aws-ec2-user-provisioning-security-files'
        type: string
      aws_account_id:
        description: 'AWS Account ID'
        required: true
        default: '872515261591'
        type: string
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-2'
        type: choice
        options:
          - us-east-2
          - us-west-2
          - us-east-1

env:
  FORTIFY_VERSION: "24.2.0"
  FORTIFY_HOME: "/opt/fortify"
  FORTIFY_SCA_HOME: "/opt/fortify/fortify-sca"
  PATH: "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"

jobs:
  fortify-scan:
    name: Fortify Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup System Environment
        run: |
          echo "=== Setting up System Environment ==="
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "✅ System environment configured"
          
          # Update package lists
          sudo apt-get update
          
          # Install Java and essential system utilities
          sudo apt-get install -y \
            default-jdk \
            unzip \
            coreutils \
            findutils \
            grep \
            sed \
            bash \
            cpio \
            tar \
            gzip \
            wget \
            curl \
            build-essential \
            pkg-config \
            file \
            procps \
            util-linux \
            gawk \
            less \
            vim-tiny \
            python3 \
            python3-pip \
            ca-certificates \
            gnupg \
            lsb-release
          
          # Verify critical commands are available
          echo "🔍 Verifying critical commands are available:"
          which cp || echo "❌ cp not found"
          which mv || echo "❌ mv not found"
          which rm || echo "❌ rm not found"
          which mkdir || echo "❌ mkdir not found"
          which ls || echo "❌ ls not found"
          which find || echo "❌ find not found"
          which java || echo "❌ java not found"
          
          # Set PATH to ensure system binaries are accessible
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          echo "PATH set to: $PATH"
          
          echo "✅ System dependencies installed"
          
          # Export PATH to GitHub environment for all subsequent steps
          echo "PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
          echo "✅ PATH exported to GitHub environment"
          
          # Create symlinks to ensure commands are accessible
          echo "🔧 Creating symlinks for critical commands..."
          sudo ln -sf /bin/cp /usr/bin/cp 2>/dev/null || echo "cp symlink already exists"
          sudo ln -sf /bin/mv /usr/bin/mv 2>/dev/null || echo "mv symlink already exists"
          sudo ln -sf /bin/rm /usr/bin/rm 2>/dev/null || echo "rm symlink already exists"
          sudo ln -sf /bin/mkdir /usr/bin/mkdir 2>/dev/null || echo "mkdir symlink already exists"
          sudo ln -sf /bin/ls /usr/bin/ls 2>/dev/null || echo "ls symlink already exists"
          
          echo "✅ System configuration completed"

      - name: Install System Dependencies
        run: |
          echo "=== Installing Additional System Dependencies ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          # Install additional tools
          sudo apt-get install -y \
            tree \
            htop \
            vim \
            nano \
            less \
            file \
            lsof \
            net-tools \
            procps \
            psmisc \
            strace \
            tcpdump \
            telnet \
            netcat-openbsd \
            dnsutils \
            iputils-ping \
            traceroute \
            nmap \
            tcpdump \
            wireshark-common \
            tshark \
            iptables \
            ufw \
            fail2ban \
            logrotate \
            rsyslog \
            cron \
            systemd \
            dbus \
            policykit-1 \
            sudo \
            passwd \
            shadow \
            libpam-modules \
            libpam-modules-bin \
            libpam-runtime \
            libpam-systemd \
            libpam-ldap \
            libpam-ldapd \
            libnss-ldap \
            libnss-ldapd \
            nscd \
            nslcd \
            sssd \
            sssd-tools \
            libsss-sudo \
            libsss-idmap \
            libsss-nss-idmap \
            libsss-krb5-common \
            libsss-krb5-2 \
            libsss-ad-common \
            libsss-ad-2 \
            libsss-ldap-2 \
            libsss-ldap-common \
            libsss-certificate \
            libsss-certificate-common \
            libsss-sudo-common \
            libsss-sudo-2 \
            libsss-idmap-common \
            libsss-idmap-2 \
            libsss-nss-idmap-common \
            libsss-nss-idmap-2 \
            libsss-krb5-common \
            libsss-krb5-2 \
            libsss-ad-common \
            libsss-ad-2 \
            libsss-ldap-2 \
            libsss-ldap-common \
            libsss-certificate \
            libsss-certificate-common \
            libsss-sudo-common \
            libsss-sudo-2 \
            libsss-idmap-common \
            libsss-idmap-2 \
            libsss-nss-idmap-common \
            libsss-nss-idmap-2

      - name: Verify System Environment
        run: |
          echo "=== System Environment Verification ==="
          
          # Ensure PATH includes system binaries
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          echo "🔍 Current PATH: $PATH"
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 User: $(whoami)"
          echo "🔍 Home directory: $HOME"
          
          # Test critical commands
          echo "🧪 Testing critical commands:"
          cp --version || echo "❌ cp command failed"
          mv --version || echo "❌ mv command failed"
          rm --version || echo "❌ rm command failed"
          mkdir --version || echo "❌ mkdir command failed"
          ls --version || echo "❌ ls command failed"
          find --version || echo "❌ find command failed"
          java -version || echo "❌ java command failed"
          
          echo "✅ System environment verified"

      - name: Set Role Name
        run: |
          if [ -z "${{ secrets.aws_ec2_creation_role }}" ]; then
            echo "❌ Required secret 'aws_ec2_creation_role' is not set"
            exit 1
          fi
          
          echo 'AuthRole=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ secrets.aws_ec2_creation_role }}' >> $GITHUB_ENV
          echo "Using role ARN: ${{ env.AuthRole }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AuthRole }}
          role-duration-seconds: 3600
          aws-region: ${{ inputs.aws_region }}

      - name: Verify AWS Credentials
        run: |
          echo "=== Verifying AWS Credentials ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          aws sts get-caller-identity
          echo "✅ AWS credentials verified"

      - name: Create Fortify Installation Directory
        run: |
          echo "=== Creating Fortify Installation Directory ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          sudo mkdir -p ${{ env.FORTIFY_HOME }}
          sudo chown $USER:$USER ${{ env.FORTIFY_HOME }}
          chmod 755 ${{ env.FORTIFY_HOME }}
          
          # Verify commands are accessible
          which mkdir && which chown && which chmod
          
          echo "✅ Fortify directory created: ${{ env.FORTIFY_HOME }}"

      - name: Download Fortify Installation Files from S3
        run: |
          echo "=== Downloading Fortify Installation Files from S3 ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          S3_BUCKET="${{ inputs.s3_bucket }}"
          FORTIFY_VERSION="${{ inputs.fortify_version }}"
          
          echo "Downloading from S3 bucket: $S3_BUCKET"
          echo "Fortify version: $FORTIFY_VERSION"
          
          # Verify AWS CLI is accessible (configured by aws-actions/configure-aws-credentials)
          which aws
          
          # Download Fortify SCA installer
          echo "📥 Downloading Fortify SCA installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_SCA_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download Fortify Apps and Tools installer
          echo "📥 Downloading Fortify Apps and Tools installer..."
          aws s3 cp s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/Fortify_Apps_and_Tools_$FORTIFY_VERSION\_linux_x64.run ${{ env.FORTIFY_HOME }}/
          
          # Download license file
          echo "📥 Downloading Fortify license..."
          aws s3 cp "s3://$S3_BUCKET/fortify/$FORTIFY_VERSION/components/fortify-license" ${{ env.FORTIFY_HOME }}/fortify.license
          
          # Make installer executable
          chmod +x ${{ env.FORTIFY_HOME }}/*.run
          
          echo "✅ All Fortify files downloaded from S3"
          ls -la ${{ env.FORTIFY_HOME }}/

      - name: Install Fortify SCA
        run: |
          echo "=== Installing Fortify SCA ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          cd ${{ env.FORTIFY_HOME }}
          
          # Install Fortify SCA with fallback strategies
          echo "🔧 Installing Fortify SCA..."
          
          # Method 1: Try with installdir
          if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_SCA_HOME }}; then
            echo "✅ Fortify SCA installed successfully with installdir"
            SCA_INSTALL_METHOD="installdir"
          else
            echo "⚠️  installdir failed, trying without directory specification..."
            # Method 2: Try without directory specification (install to default location)
            if ./Fortify_SCA_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended; then
              echo "✅ Fortify SCA installed successfully to default location"
              # Update the SCA home to default location
              echo "FORTIFY_SCA_HOME=/opt/fortify/fortify-sca" >> $GITHUB_ENV
              SCA_INSTALL_METHOD="default_location"
            else
              echo "❌ Fortify SCA installation failed"
              exit 1
            fi
          fi
          
          # Set environment variables
          echo "FORTIFY_SCA_HOME=${{ env.FORTIFY_SCA_HOME }}" >> $GITHUB_ENV
          echo "PATH=\$PATH:\$FORTIFY_SCA_HOME/bin" >> $GITHUB_ENV
          echo "SCA_INSTALL_METHOD=$SCA_INSTALL_METHOD" >> $GITHUB_ENV

      - name: Install Fortify Apps and Tools
        run: |
          echo "=== Installing Fortify Apps and Tools ==="
          
          # Ensure PATH is available
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
          
          cd ${{ env.FORTIFY_HOME }}
          
          echo "🔧 Installing Fortify Apps and Tools..."
          
          # Install Fortify Apps and Tools to the same directory
          if ./Fortify_Apps_and_Tools_${{ env.FORTIFY_VERSION }}_linux_x64.run --mode unattended --installdir ${{ env.FORTIFY_SCA_HOME }}; then
            echo "✅ Fortify Apps and Tools installed successfully"
            APPS_TOOLS_INSTALLED="true"
          else
            echo "⚠️  Apps and Tools installation failed, but continuing with SCA..."
            echo "Note: Reporting tools may not be available"
            APPS_TOOLS_INSTALLED="false"
          fi
          
          # Set environment variables
          echo "FORTIFY_APPS_HOME=${{ env.FORTIFY_APPS_HOME }}" >> $GITHUB_ENV
          echo "PATH=\$PATH:\$FORTIFY_APPS_HOME/bin" >> $GITHUB_ENV
          echo "APPS_TOOLS_INSTALLED=$APPS_TOOLS_INSTALLED" >> $GITHUB_ENV

      - name: Verify Fortify Installation
        run: |
          echo "=== Verifying Fortify Installation ==="
          
          # Ensure PATH includes system binaries and Fortify
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          
          # Verify Fortify SCA installation
          if [ -f "${{ env.FORTIFY_SCA_HOME }}/bin/sourceanalyzer" ]; then
            echo "✅ Fortify SCA sourceanalyzer found"
            ${{ env.FORTIFY_SCA_HOME }}/bin/sourceanalyzer -version
          else
            echo "❌ Fortify SCA sourceanalyzer not found"
            exit 1
          fi
          
          # Verify Fortify Apps & Tools installation
          if [ -f "${{ env.FORTIFY_APPS_HOME }}/bin/ReportGenerator" ]; then
            echo "✅ Fortify ReportGenerator found"
            ${{ env.FORTIFY_APPS_HOME }}/bin/ReportGenerator -version
          else
            echo "❌ Fortify ReportGenerator not found"
            exit 1
          fi
          
          echo "✅ Fortify installation verified successfully"

      - name: Run Fortify Source Code Scan
        if: inputs.scan_type == 'source-code'
        run: |
          echo "=== Running Fortify Source Code Scan ==="
          
          # Ensure PATH includes system binaries and Fortify
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          echo "🔍 Starting source code analysis..."
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-scan -clean
          
          # Run source code analysis
          if sourceanalyzer -b fortify-scan \
            -source 1.8 \
            -cp "**/*.jar" \
            -cp "**/*.class" \
            -cp "**/*.py" \
            -cp "**/*.js" \
            -cp "**/*.ts" \
            -cp "**/*.tf" \
            -cp "**/*.yml" \
            -cp "**/*.yaml" \
            -cp "**/*.sh" \
            .; then
            
            echo "✅ Source code analysis completed successfully"
            
            # Generate FPR report
            echo "📄 Generating FPR report..."
            if sourceanalyzer -b fortify-scan -scan -f $SCAN_DIR/fortify-scan.fpr; then
              echo "✅ FPR report generated: $SCAN_DIR/fortify-scan.fpr"
              
              # Generate HTML report
              echo "📄 Generating HTML report..."
              if ReportGenerator -format html -f $SCAN_DIR/fortify-scan.html -source $SCAN_DIR/fortify-scan.fpr; then
                echo "✅ HTML report generated successfully: $SCAN_DIR/fortify-scan.html"
              else
                echo "⚠️  HTML report generation failed, but FPR is available"
              fi
            else
              echo "❌ FPR report generation failed"
              exit 1
            fi
          else
            echo "❌ Source code analysis failed"
            exit 1
          fi

      - name: Run Fortify Dependency Check
        if: inputs.scan_type == 'dependency-check'
        run: |
          echo "=== Running Fortify Dependency Check ==="
          
          # Ensure PATH includes system binaries and Fortify
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          echo "🔍 Starting dependency check..."
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-deps -clean
          
          # Run dependency check
          if sourceanalyzer -b fortify-deps \
            -cp "**/*.jar" \
            -cp "**/*.class" \
            -cp "**/*.py" \
            -cp "**/*.js" \
            -cp "**/*.ts" \
            .; then
            
            echo "✅ Dependency check completed successfully"
            
            # Generate FPR report
            echo "📄 Generating FPR report..."
            if sourceanalyzer -b fortify-deps -scan -f $SCAN_DIR/fortify-deps.fpr; then
              echo "✅ FPR report generated: $SCAN_DIR/fortify-deps.fpr"
              
              # Generate HTML report
              echo "📄 Generating HTML report..."
              if ReportGenerator -format html -f $SCAN_DIR/fortify-deps.html -source $SCAN_DIR/fortify-deps.fpr; then
                echo "✅ HTML report generated successfully: $SCAN_DIR/fortify-deps.html"
              else
                echo "⚠️  HTML report generation failed, but FPR is available"
              fi
            else
              echo "❌ FPR report generation failed"
              exit 1
            fi
          else
            echo "❌ Dependency check failed"
            exit 1
          fi

      - name: Run Full Fortify Scan
        if: inputs.scan_type == 'full-scan'
        run: |
          echo "=== Running Full Fortify Scan ==="
          
          # Ensure PATH includes system binaries and Fortify
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          export FORTIFY_LICENSE_PATH="${{ env.FORTIFY_SCA_HOME }}/bin/fortify.license"
          
          # Create scan directory
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          mkdir -p $SCAN_DIR
          
          echo "🔍 Starting comprehensive analysis..."
          
          # Clean previous scan artifacts
          sourceanalyzer -b fortify-full -clean
          
          # Run comprehensive scan
          if sourceanalyzer -b fortify-full \
            -source 1.8 \
            -cp "**/*.jar" \
            -cp "**/*.class" \
            -cp "**/*.py" \
            -cp "**/*.js" \
            -cp "**/*.ts" \
            -cp "**/*.tf" \
            -cp "**/*.yml" \
            -cp "**/*.yaml" \
            -cp "**/*.sh" \
            -Dcom.fortify.sca.PhaseHigherOrder.Lower=false \
            -Dcom.fortify.sca.EnableAWB=true \
            -Dcom.fortify.sca.EnableReportGeneration=true \
            .; then
            
            echo "✅ Comprehensive analysis completed successfully"
            
            # Generate FPR report
            echo "📄 Generating FPR report..."
            if sourceanalyzer -b fortify-full -scan -f $SCAN_DIR/fortify-full.fpr; then
              echo "✅ FPR report generated: $SCAN_DIR/fortify-full.fpr"
              
              # Generate HTML report
              echo "📄 Generating HTML report..."
              if ReportGenerator -f $SCAN_DIR/fortify-full.html -source $SCAN_DIR/fortify-full.fpr; then
                echo "✅ HTML report generated: $SCAN_DIR/fortify-full.html"
              else
                echo "❌ HTML report generation failed"
                exit 1
              fi
            else
              echo "❌ FPR report generation failed"
              exit 1
            fi
          else
            echo "❌ Comprehensive analysis failed"
            exit 1
          fi

      - name: Upload Scan Results to S3
        run: |
          echo "=== Uploading Scan Results to S3 ==="
          
          S3_BUCKET="${{ inputs.s3_bucket }}"
          SCAN_DIR="${{ env.FORTIFY_HOME }}/scan-results"
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          S3_RESULTS_PATH="scan-results/$TIMESTAMP"
          
          echo "📤 Uploading scan results to S3..."
          echo "S3 Path: s3://$S3_BUCKET/$S3_RESULTS_PATH"
          
          # Upload all scan results
          aws s3 cp $SCAN_DIR s3://$S3_BUCKET/$S3_RESULTS_PATH --recursive
          
          if [ $? -eq 0 ]; then
            echo "✅ Scan results uploaded to S3 successfully"
            echo "S3 Location: s3://$S3_BUCKET/$S3_RESULTS_PATH"
          else
            echo "❌ Failed to upload scan results to S3"
            exit 1
          fi

      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: fortify-scan-results
          path: ${{ env.FORTIFY_HOME }}/scan-results/
          retention-days: 30

      - name: Final Workflow Summary
        run: |
          echo "=== Fortify Security Scan Workflow Summary ==="
          
          # Ensure PATH includes system binaries and Fortify
          export PATH="/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/sbin:$PATH:${{ env.FORTIFY_SCA_HOME }}/bin:${{ env.FORTIFY_APPS_HOME }}/bin"
          
          # Verify commands are accessible
          which sourceanalyzer && which ReportGenerator
          
          echo "✅ Fortify Security Scan completed successfully!"
          echo ""
          echo "📋 Installation Summary:"
          echo "   - SCA Install Method: Direct from S3"
          echo "   - Apps & Tools Installed: Yes"
          echo "   - FORTIFY_SCA_HOME: ${{ env.FORTIFY_SCA_HOME }}"
          echo "   - FORTIFY_APPS_HOME: ${{ env.FORTIFY_APPS_HOME }}"
          echo ""
          echo "📋 Rules Configuration Summary:"
          echo "   - Rules Source: Built-in (no custom rules pack required)"
          echo "   - Rules Status: Ready for scanning"
          echo ""
          echo "📋 Scan Results:"
          echo "   - Scan Type: ${{ inputs.scan_type }}"
          echo "   - Scan Directory: ${{ env.FORTIFY_HOME }}/scan-results/"
          echo "   - S3 Bucket: ${{ inputs.s3_bucket }}"
          echo "   - S3 Results Path: scan-results/$(date +"%Y%m%d-%H%M%S")"
          echo "   - Reports: Available in scan-results directory and S3"
          echo ""
          echo "📋 Next Steps:"
          echo "1. Download scan results from artifacts"
          echo "2. Review HTML report for vulnerabilities"
          echo "3. Import FPR to Fortify SSC for detailed analysis"
          echo "4. Address critical and high severity issues"
          echo "5. Re-run scan after fixes to verify remediation"
          echo ""
          echo "✅ Fortify Security Scan completed successfully!"
